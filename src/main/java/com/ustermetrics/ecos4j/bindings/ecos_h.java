// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ecos_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define SUITESPARSE_MAIN_VERSION 4
     * }
     */
    public static int SUITESPARSE_MAIN_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SUITESPARSE_SUB_VERSION 0
     * }
     */
    public static int SUITESPARSE_SUB_VERSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SUITESPARSE_SUBSUB_VERSION 2
     * }
     */
    public static int SUITESPARSE_SUBSUB_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef double pfloat;
     * }
     */
    public static final OfDouble pfloat = JAVA_DOUBLE;
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$2,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuiteSparse_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"SuiteSparse_malloc");
    }
    /**
     * {@snippet :
     * void* SuiteSparse_malloc(size_t nitems, size_t size_of_item, int* ok, SuiteSparse_config* config);
     * }
     */
    public static MemorySegment SuiteSparse_malloc(long nitems, long size_of_item, MemorySegment ok, MemorySegment config) {
        var mh$ = SuiteSparse_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nitems, size_of_item, ok, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuiteSparse_free$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"SuiteSparse_free");
    }
    /**
     * {@snippet :
     * void* SuiteSparse_free(void* p, SuiteSparse_config* config);
     * }
     */
    public static MemorySegment SuiteSparse_free(MemorySegment p, MemorySegment config) {
        var mh$ = SuiteSparse_free$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuiteSparse_tic$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"SuiteSparse_tic");
    }
    /**
     * {@snippet :
     * void SuiteSparse_tic(double tic[2]);
     * }
     */
    public static void SuiteSparse_tic(MemorySegment tic) {
        var mh$ = SuiteSparse_tic$MH();
        try {
            mh$.invokeExact(tic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuiteSparse_toc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"SuiteSparse_toc");
    }
    /**
     * {@snippet :
     * double SuiteSparse_toc(double tic[2]);
     * }
     */
    public static double SuiteSparse_toc(MemorySegment tic) {
        var mh$ = SuiteSparse_toc$MH();
        try {
            return (double)mh$.invokeExact(tic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuiteSparse_time$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"SuiteSparse_time");
    }
    /**
     * {@snippet :
     * double SuiteSparse_time();
     * }
     */
    public static double SuiteSparse_time() {
        var mh$ = SuiteSparse_time$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long idxint;
     * }
     */
    public static final OfLong idxint = JAVA_LONG;
    public static MethodHandle sparseMV$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"sparseMV");
    }
    /**
     * {@snippet :
     * void sparseMV(spmat* A, pfloat* x, pfloat* y, idxint a, idxint newVector);
     * }
     */
    public static void sparseMV(MemorySegment A, MemorySegment x, MemorySegment y, long a, long newVector) {
        var mh$ = sparseMV$MH();
        try {
            mh$.invokeExact(A, x, y, a, newVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sparseMtVm$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"sparseMtVm");
    }
    /**
     * {@snippet :
     * void sparseMtVm(spmat* A, pfloat* x, pfloat* y, idxint newVector, idxint skipDiagonal);
     * }
     */
    public static void sparseMtVm(MemorySegment A, MemorySegment x, MemorySegment y, long newVector, long skipDiagonal) {
        var mh$ = sparseMtVm$MH();
        try {
            mh$.invokeExact(A, x, y, newVector, skipDiagonal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vadd$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"vadd");
    }
    /**
     * {@snippet :
     * void vadd(idxint n, pfloat* x, pfloat* y);
     * }
     */
    public static void vadd(long n, MemorySegment x, MemorySegment y) {
        var mh$ = vadd$MH();
        try {
            mh$.invokeExact(n, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsubscale$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"vsubscale");
    }
    /**
     * {@snippet :
     * void vsubscale(idxint n, pfloat a, pfloat* x, pfloat* y);
     * }
     */
    public static void vsubscale(long n, double a, MemorySegment x, MemorySegment y) {
        var mh$ = vsubscale$MH();
        try {
            mh$.invokeExact(n, a, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle norm2$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"norm2");
    }
    /**
     * {@snippet :
     * pfloat norm2(pfloat* v, idxint n);
     * }
     */
    public static double norm2(MemorySegment v, long n) {
        var mh$ = norm2$MH();
        try {
            return (double)mh$.invokeExact(v, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle norminf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"norminf");
    }
    /**
     * {@snippet :
     * pfloat norminf(pfloat* v, idxint n);
     * }
     */
    public static double norminf(MemorySegment v, long n) {
        var mh$ = norminf$MH();
        try {
            return (double)mh$.invokeExact(v, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eddot$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"eddot");
    }
    /**
     * {@snippet :
     * pfloat eddot(idxint n, pfloat* x, pfloat* y);
     * }
     */
    public static double eddot(long n, MemorySegment x, MemorySegment y) {
        var mh$ = eddot$MH();
        try {
            return (double)mh$.invokeExact(n, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wrightOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$6,"wrightOmega");
    }
    /**
     * {@snippet :
     * pfloat wrightOmega(pfloat z);
     * }
     */
    public static double wrightOmega(double z) {
        var mh$ = wrightOmega$MH();
        try {
            return (double)mh$.invokeExact(z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalExpHessian$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"evalExpHessian");
    }
    /**
     * {@snippet :
     * void evalExpHessian(pfloat* w, pfloat* v, pfloat mu);
     * }
     */
    public static void evalExpHessian(MemorySegment w, MemorySegment v, double mu) {
        var mh$ = evalExpHessian$MH();
        try {
            mh$.invokeExact(w, v, mu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalExpGradient$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"evalExpGradient");
    }
    /**
     * {@snippet :
     * void evalExpGradient(pfloat* w, pfloat* g);
     * }
     */
    public static void evalExpGradient(MemorySegment w, MemorySegment g) {
        var mh$ = evalExpGradient$MH();
        try {
            mh$.invokeExact(w, g);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalBarrierValue$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$6,"evalBarrierValue");
    }
    /**
     * {@snippet :
     * pfloat evalBarrierValue(pfloat* siter, pfloat* ziter, idxint fc, idxint nexc);
     * }
     */
    public static double evalBarrierValue(MemorySegment siter, MemorySegment ziter, long fc, long nexc) {
        var mh$ = evalBarrierValue$MH();
        try {
            return (double)mh$.invokeExact(siter, ziter, fc, nexc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scaleToAddExpcone$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"scaleToAddExpcone");
    }
    /**
     * {@snippet :
     * void scaleToAddExpcone(pfloat* y, pfloat* x, expcone* expcones, idxint nexc, idxint fc);
     * }
     */
    public static void scaleToAddExpcone(MemorySegment y, MemorySegment x, MemorySegment expcones, long nexc, long fc) {
        var mh$ = scaleToAddExpcone$MH();
        try {
            mh$.invokeExact(y, x, expcones, nexc, fc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalExpPrimalFeas$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"evalExpPrimalFeas");
    }
    /**
     * {@snippet :
     * idxint evalExpPrimalFeas(pfloat* s, idxint nexc);
     * }
     */
    public static long evalExpPrimalFeas(MemorySegment s, long nexc) {
        var mh$ = evalExpPrimalFeas$MH();
        try {
            return (long)mh$.invokeExact(s, nexc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalExpDualFeas$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"evalExpDualFeas");
    }
    /**
     * {@snippet :
     * idxint evalExpDualFeas(pfloat* s, idxint nexc);
     * }
     */
    public static long evalExpDualFeas(MemorySegment s, long nexc) {
        var mh$ = evalExpDualFeas$MH();
        try {
            return (long)mh$.invokeExact(s, nexc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bring2cone$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"bring2cone");
    }
    /**
     * {@snippet :
     * void bring2cone(cone* C, pfloat* r, pfloat* s);
     * }
     */
    public static void bring2cone(MemorySegment C, MemorySegment r, MemorySegment s) {
        var mh$ = bring2cone$MH();
        try {
            mh$.invokeExact(C, r, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unitInitialization$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"unitInitialization");
    }
    /**
     * {@snippet :
     * void unitInitialization(cone* C, pfloat* s, pfloat* z, pfloat scaling);
     * }
     */
    public static void unitInitialization(MemorySegment C, MemorySegment s, MemorySegment z, double scaling) {
        var mh$ = unitInitialization$MH();
        try {
            mh$.invokeExact(C, s, z, scaling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle updateScalings$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"updateScalings");
    }
    /**
     * {@snippet :
     * idxint updateScalings(cone* C, pfloat* s, pfloat* z, pfloat* lambda, pfloat mu);
     * }
     */
    public static long updateScalings(MemorySegment C, MemorySegment s, MemorySegment z, MemorySegment lambda, double mu) {
        var mh$ = updateScalings$MH();
        try {
            return (long)mh$.invokeExact(C, s, z, lambda, mu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle evalSymmetricBarrierValue$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"evalSymmetricBarrierValue");
    }
    /**
     * {@snippet :
     * pfloat evalSymmetricBarrierValue(pfloat* siter, pfloat* ziter, pfloat tauIter, pfloat kapIter, cone* C, pfloat D);
     * }
     */
    public static double evalSymmetricBarrierValue(MemorySegment siter, MemorySegment ziter, double tauIter, double kapIter, MemorySegment C, double D) {
        var mh$ = evalSymmetricBarrierValue$MH();
        try {
            return (double)mh$.invokeExact(siter, ziter, tauIter, kapIter, C, D);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scale$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"scale");
    }
    /**
     * {@snippet :
     * void scale(pfloat* z, cone* C, pfloat* lambda);
     * }
     */
    public static void scale(MemorySegment z, MemorySegment C, MemorySegment lambda) {
        var mh$ = scale$MH();
        try {
            mh$.invokeExact(z, C, lambda);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scale2add$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"scale2add");
    }
    /**
     * {@snippet :
     * void scale2add(pfloat* x, pfloat* y, cone* C);
     * }
     */
    public static void scale2add(MemorySegment x, MemorySegment y, MemorySegment C) {
        var mh$ = scale2add$MH();
        try {
            mh$.invokeExact(x, y, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unscale$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"unscale");
    }
    /**
     * {@snippet :
     * void unscale(pfloat* lambda, cone* C, pfloat* z);
     * }
     */
    public static void unscale(MemorySegment lambda, MemorySegment C, MemorySegment z) {
        var mh$ = unscale$MH();
        try {
            mh$.invokeExact(lambda, C, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle conicProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$6,"conicProduct");
    }
    /**
     * {@snippet :
     * pfloat conicProduct(pfloat* u, pfloat* v, cone* C, pfloat* w);
     * }
     */
    public static double conicProduct(MemorySegment u, MemorySegment v, MemorySegment C, MemorySegment w) {
        var mh$ = conicProduct$MH();
        try {
            return (double)mh$.invokeExact(u, v, C, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle conicDivision$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"conicDivision");
    }
    /**
     * {@snippet :
     * void conicDivision(pfloat* u, pfloat* v, cone* C, pfloat* w);
     * }
     */
    public static void conicDivision(MemorySegment u, MemorySegment v, MemorySegment C, MemorySegment w) {
        var mh$ = conicDivision$MH();
        try {
            mh$.invokeExact(u, v, C, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getSOCDetails$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"getSOCDetails");
    }
    /**
     * {@snippet :
     * void getSOCDetails(socone* soc, idxint* conesize, pfloat* eta_square, pfloat* d1, pfloat* u0, pfloat* u1, pfloat* v1, pfloat** q);
     * }
     */
    public static void getSOCDetails(MemorySegment soc, MemorySegment conesize, MemorySegment eta_square, MemorySegment d1, MemorySegment u0, MemorySegment u1, MemorySegment v1, MemorySegment q) {
        var mh$ = getSOCDetails$MH();
        try {
            mh$.invokeExact(soc, conesize, eta_square, d1, u0, u1, v1, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unstretch$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"unstretch");
    }
    /**
     * {@snippet :
     * void unstretch(idxint n, idxint p, cone* C, idxint* Pinv, pfloat* Px, pfloat* dx, pfloat* dy, pfloat* dz);
     * }
     */
    public static void unstretch(long n, long p, MemorySegment C, MemorySegment Pinv, MemorySegment Px, MemorySegment dx, MemorySegment dy, MemorySegment dz) {
        var mh$ = unstretch$MH();
        try {
            mh$.invokeExact(n, p, C, Pinv, Px, dx, dy, dz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kkt_factor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"kkt_factor");
    }
    /**
     * {@snippet :
     * idxint kkt_factor(kkt* KKT, pfloat eps, pfloat delta);
     * }
     */
    public static long kkt_factor(MemorySegment KKT, double eps, double delta) {
        var mh$ = kkt_factor$MH();
        try {
            return (long)mh$.invokeExact(KKT, eps, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kkt_solve$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$6,"kkt_solve");
    }
    /**
     * {@snippet :
     * idxint kkt_solve(kkt* KKT, spmat* A, spmat* G, pfloat* Pb, pfloat* dx, pfloat* dy, pfloat* dz, idxint n, idxint p, idxint m, cone* C, idxint isinit, idxint nitref);
     * }
     */
    public static long kkt_solve(MemorySegment KKT, MemorySegment A, MemorySegment G, MemorySegment Pb, MemorySegment dx, MemorySegment dy, MemorySegment dz, long n, long p, long m, MemorySegment C, long isinit, long nitref) {
        var mh$ = kkt_solve$MH();
        try {
            return (long)mh$.invokeExact(KKT, A, G, Pb, dx, dy, dz, n, p, m, C, isinit, nitref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kkt_update$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"kkt_update");
    }
    /**
     * {@snippet :
     * void kkt_update(spmat* PKP, idxint* P, cone* C);
     * }
     */
    public static void kkt_update(MemorySegment PKP, MemorySegment P, MemorySegment C) {
        var mh$ = kkt_update$MH();
        try {
            mh$.invokeExact(PKP, P, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kkt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"kkt_init");
    }
    /**
     * {@snippet :
     * void kkt_init(spmat* PKP, idxint* P, cone* C);
     * }
     */
    public static void kkt_init(MemorySegment PKP, MemorySegment P, MemorySegment C) {
        var mh$ = kkt_init$MH();
        try {
            mh$.invokeExact(PKP, P, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tic$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"tic");
    }
    /**
     * {@snippet :
     * void tic(timer* t);
     * }
     */
    public static void tic(MemorySegment t) {
        var mh$ = tic$MH();
        try {
            mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toc$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"toc");
    }
    /**
     * {@snippet :
     * pfloat toc(timer* t);
     * }
     */
    public static double toc(MemorySegment t) {
        var mh$ = toc$MH();
        try {
            return (double)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_setup$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"ECOS_setup");
    }
    /**
     * {@snippet :
     * pwork* ECOS_setup(idxint n, idxint m, idxint p, idxint l, idxint ncones, idxint* q, idxint nex, pfloat* Gpr, idxint* Gjc, idxint* Gir, pfloat* Apr, idxint* Ajc, idxint* Air, pfloat* c, pfloat* h, pfloat* b);
     * }
     */
    public static MemorySegment ECOS_setup(long n, long m, long p, long l, long ncones, MemorySegment q, long nex, MemorySegment Gpr, MemorySegment Gjc, MemorySegment Gir, MemorySegment Apr, MemorySegment Ajc, MemorySegment Air, MemorySegment c, MemorySegment h, MemorySegment b) {
        var mh$ = ECOS_setup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n, m, p, l, ncones, q, nex, Gpr, Gjc, Gir, Apr, Ajc, Air, c, h, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expConeLineSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"expConeLineSearch");
    }
    /**
     * {@snippet :
     * pfloat expConeLineSearch(pwork* w, pfloat dtau, pfloat dkappa, idxint affine);
     * }
     */
    public static double expConeLineSearch(MemorySegment w, double dtau, double dkappa, long affine) {
        var mh$ = expConeLineSearch$MH();
        try {
            return (double)mh$.invokeExact(w, dtau, dkappa, affine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_solve$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"ECOS_solve");
    }
    /**
     * {@snippet :
     * idxint ECOS_solve(pwork* w);
     * }
     */
    public static long ECOS_solve(MemorySegment w) {
        var mh$ = ECOS_solve$MH();
        try {
            return (long)mh$.invokeExact(w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"ECOS_cleanup");
    }
    /**
     * {@snippet :
     * void ECOS_cleanup(pwork* w, idxint keepvars);
     * }
     */
    public static void ECOS_cleanup(MemorySegment w, long keepvars) {
        var mh$ = ECOS_cleanup$MH();
        try {
            mh$.invokeExact(w, keepvars);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_ver$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"ECOS_ver");
    }
    /**
     * {@snippet :
     * char* ECOS_ver();
     * }
     */
    public static MemorySegment ECOS_ver() {
        var mh$ = ECOS_ver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecos_updateDataEntry_h$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"ecos_updateDataEntry_h");
    }
    /**
     * {@snippet :
     * void ecos_updateDataEntry_h(pwork* w, idxint idx, pfloat value);
     * }
     */
    public static void ecos_updateDataEntry_h(MemorySegment w, long idx, double value) {
        var mh$ = ecos_updateDataEntry_h$MH();
        try {
            mh$.invokeExact(w, idx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecos_updateDataEntry_c$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"ecos_updateDataEntry_c");
    }
    /**
     * {@snippet :
     * void ecos_updateDataEntry_c(pwork* w, idxint idx, pfloat value);
     * }
     */
    public static void ecos_updateDataEntry_c(MemorySegment w, long idx, double value) {
        var mh$ = ecos_updateDataEntry_c$MH();
        try {
            mh$.invokeExact(w, idx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_updateData$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"ECOS_updateData");
    }
    /**
     * {@snippet :
     * void ECOS_updateData(pwork* w, pfloat* Gpr, pfloat* Apr, pfloat* c, pfloat* h, pfloat* b);
     * }
     */
    public static void ECOS_updateData(MemorySegment w, MemorySegment Gpr, MemorySegment Apr, MemorySegment c, MemorySegment h, MemorySegment b) {
        var mh$ = ECOS_updateData$MH();
        try {
            mh$.invokeExact(w, Gpr, Apr, c, h, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define PRINTLEVEL 2
     * }
     */
    public static int PRINTLEVEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define PROFILING 1
     * }
     */
    public static int PROFILING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DEBUG 0
     * }
     */
    public static int DEBUG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ECOS_INFINITY Infinity
     * }
     */
    public static double ECOS_INFINITY() {
        return Double.valueOf("Infinity");
    }
    /**
     * {@snippet :
     * #define ECOS_NAN NaN
     * }
     */
    public static double ECOS_NAN() {
        return Double.valueOf("NaN");
    }
    /**
     * {@snippet :
     * #define SUITESPARSE_DATE "July 17, 2012"
     * }
     */
    public static MemorySegment SUITESPARSE_DATE() {
        return constants$43.const$3;
    }
    /**
     * {@snippet :
     * #define SUITESPARSE_VERSION 4000
     * }
     */
    public static int SUITESPARSE_VERSION() {
        return (int)4000L;
    }
    /**
     * {@snippet :
     * #define CONEMODE 0
     * }
     */
    public static int CONEMODE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define INSIDE_CONE 0
     * }
     */
    public static int INSIDE_CONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define OUTSIDE_CONE 1
     * }
     */
    public static int OUTSIDE_CONE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define KKT_PROBLEM 0
     * }
     */
    public static int KKT_PROBLEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define KKT_OK 1
     * }
     */
    public static int KKT_OK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MAXIT 100
     * }
     */
    public static int MAXIT() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define FEASTOL 1.0E-8
     * }
     */
    public static double FEASTOL() {
        return 1.0E-8d;
    }
    /**
     * {@snippet :
     * #define ABSTOL 1.0E-8
     * }
     */
    public static double ABSTOL() {
        return 1.0E-8d;
    }
    /**
     * {@snippet :
     * #define RELTOL 1.0E-8
     * }
     */
    public static double RELTOL() {
        return 1.0E-8d;
    }
    /**
     * {@snippet :
     * #define FTOL_INACC 1.0E-4
     * }
     */
    public static double FTOL_INACC() {
        return 1.0E-4d;
    }
    /**
     * {@snippet :
     * #define ATOL_INACC 5.0E-5
     * }
     */
    public static double ATOL_INACC() {
        return 5.0E-5d;
    }
    /**
     * {@snippet :
     * #define RTOL_INACC 5.0E-5
     * }
     */
    public static double RTOL_INACC() {
        return 5.0E-5d;
    }
    /**
     * {@snippet :
     * #define GAMMA 0.99
     * }
     */
    public static double GAMMA() {
        return 0.99d;
    }
    /**
     * {@snippet :
     * #define STATICREG 1
     * }
     */
    public static int STATICREG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DELTASTAT 7.0E-8
     * }
     */
    public static double DELTASTAT() {
        return 7.0E-8d;
    }
    /**
     * {@snippet :
     * #define DELTA 2.0E-7
     * }
     */
    public static double DELTA() {
        return 2.0E-7d;
    }
    /**
     * {@snippet :
     * #define EPS 1.0E-13
     * }
     */
    public static double EPS() {
        return 1.0E-13d;
    }
    /**
     * {@snippet :
     * #define VERBOSE 1
     * }
     */
    public static int VERBOSE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NITREF 9
     * }
     */
    public static int NITREF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define IRERRFACT 6
     * }
     */
    public static int IRERRFACT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define LINSYSACC 1.0E-14
     * }
     */
    public static double LINSYSACC() {
        return 1.0E-14d;
    }
    /**
     * {@snippet :
     * #define SIGMAMIN 1.0E-4
     * }
     */
    public static double SIGMAMIN() {
        return 1.0E-4d;
    }
    /**
     * {@snippet :
     * #define SIGMAMAX 1.0
     * }
     */
    public static double SIGMAMAX() {
        return 1.0d;
    }
    /**
     * {@snippet :
     * #define STEPMIN 1.0E-6
     * }
     */
    public static double STEPMIN() {
        return 1.0E-6d;
    }
    /**
     * {@snippet :
     * #define STEPMAX 0.999
     * }
     */
    public static double STEPMAX() {
        return 0.999d;
    }
    /**
     * {@snippet :
     * #define SAFEGUARD 500
     * }
     */
    public static int SAFEGUARD() {
        return (int)500L;
    }
    /**
     * {@snippet :
     * #define MAX_BK 90
     * }
     */
    public static int MAX_BK() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * #define BK_SCALE 0.8
     * }
     */
    public static double BK_SCALE() {
        return 0.8d;
    }
    /**
     * {@snippet :
     * #define MIN_DISTANCE 0.1
     * }
     */
    public static double MIN_DISTANCE() {
        return 0.1d;
    }
    /**
     * {@snippet :
     * #define CENTRALITY 1
     * }
     */
    public static int CENTRALITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EQUILIBRATE 1
     * }
     */
    public static int EQUILIBRATE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EQUIL_ITERS 3
     * }
     */
    public static int EQUIL_ITERS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ECOS_OPTIMAL 0
     * }
     */
    public static int ECOS_OPTIMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ECOS_PINF 1
     * }
     */
    public static int ECOS_PINF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ECOS_DINF 2
     * }
     */
    public static int ECOS_DINF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ECOS_INACC_OFFSET 10
     * }
     */
    public static int ECOS_INACC_OFFSET() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define ECOS_MAXIT -1
     * }
     */
    public static int ECOS_MAXIT() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define ECOS_NUMERICS -2
     * }
     */
    public static int ECOS_NUMERICS() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * #define ECOS_OUTCONE -3
     * }
     */
    public static int ECOS_OUTCONE() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * #define ECOS_SIGINT -4
     * }
     */
    public static int ECOS_SIGINT() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * #define ECOS_FATAL -7
     * }
     */
    public static int ECOS_FATAL() {
        return (int)-7L;
    }
}


