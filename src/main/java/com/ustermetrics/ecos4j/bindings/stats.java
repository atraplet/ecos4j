// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct stats {
 *     pfloat pcost;
 *     pfloat dcost;
 *     pfloat pres;
 *     pfloat dres;
 *     pfloat pinf;
 *     pfloat dinf;
 *     pfloat pinfres;
 *     pfloat dinfres;
 *     pfloat gap;
 *     pfloat relgap;
 *     pfloat sigma;
 *     pfloat mu;
 *     pfloat step;
 *     pfloat step_aff;
 *     pfloat kapovert;
 *     idxint iter;
 *     idxint nitref1;
 *     idxint nitref2;
 *     idxint nitref3;
 *     pfloat tsetup;
 *     pfloat tsolve;
 *     idxint pob;
 *     idxint cb;
 *     idxint cob;
 *     idxint pb;
 *     idxint db;
 *     idxint affBack;
 *     idxint cmbBack;
 *     pfloat centrality;
 * };
 * }
 */
public class stats {

    public static MemoryLayout $LAYOUT() {
        return constants$26.const$0;
    }
    public static VarHandle pcost$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat pcost;
     * }
     */
    public static double pcost$get(MemorySegment seg) {
        return (double)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat pcost;
     * }
     */
    public static void pcost$set(MemorySegment seg, double x) {
        constants$26.const$1.set(seg, x);
    }
    public static double pcost$get(MemorySegment seg, long index) {
        return (double)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pcost$set(MemorySegment seg, long index, double x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dcost$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat dcost;
     * }
     */
    public static double dcost$get(MemorySegment seg) {
        return (double)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat dcost;
     * }
     */
    public static void dcost$set(MemorySegment seg, double x) {
        constants$26.const$2.set(seg, x);
    }
    public static double dcost$get(MemorySegment seg, long index) {
        return (double)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dcost$set(MemorySegment seg, long index, double x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pres$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat pres;
     * }
     */
    public static double pres$get(MemorySegment seg) {
        return (double)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat pres;
     * }
     */
    public static void pres$set(MemorySegment seg, double x) {
        constants$26.const$3.set(seg, x);
    }
    public static double pres$get(MemorySegment seg, long index) {
        return (double)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pres$set(MemorySegment seg, long index, double x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dres$VH() {
        return constants$26.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat dres;
     * }
     */
    public static double dres$get(MemorySegment seg) {
        return (double)constants$26.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat dres;
     * }
     */
    public static void dres$set(MemorySegment seg, double x) {
        constants$26.const$4.set(seg, x);
    }
    public static double dres$get(MemorySegment seg, long index) {
        return (double)constants$26.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dres$set(MemorySegment seg, long index, double x) {
        constants$26.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pinf$VH() {
        return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat pinf;
     * }
     */
    public static double pinf$get(MemorySegment seg) {
        return (double)constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat pinf;
     * }
     */
    public static void pinf$set(MemorySegment seg, double x) {
        constants$26.const$5.set(seg, x);
    }
    public static double pinf$get(MemorySegment seg, long index) {
        return (double)constants$26.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pinf$set(MemorySegment seg, long index, double x) {
        constants$26.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dinf$VH() {
        return constants$27.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat dinf;
     * }
     */
    public static double dinf$get(MemorySegment seg) {
        return (double)constants$27.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat dinf;
     * }
     */
    public static void dinf$set(MemorySegment seg, double x) {
        constants$27.const$0.set(seg, x);
    }
    public static double dinf$get(MemorySegment seg, long index) {
        return (double)constants$27.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dinf$set(MemorySegment seg, long index, double x) {
        constants$27.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pinfres$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat pinfres;
     * }
     */
    public static double pinfres$get(MemorySegment seg) {
        return (double)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat pinfres;
     * }
     */
    public static void pinfres$set(MemorySegment seg, double x) {
        constants$27.const$1.set(seg, x);
    }
    public static double pinfres$get(MemorySegment seg, long index) {
        return (double)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pinfres$set(MemorySegment seg, long index, double x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dinfres$VH() {
        return constants$27.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat dinfres;
     * }
     */
    public static double dinfres$get(MemorySegment seg) {
        return (double)constants$27.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat dinfres;
     * }
     */
    public static void dinfres$set(MemorySegment seg, double x) {
        constants$27.const$2.set(seg, x);
    }
    public static double dinfres$get(MemorySegment seg, long index) {
        return (double)constants$27.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dinfres$set(MemorySegment seg, long index, double x) {
        constants$27.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gap$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat gap;
     * }
     */
    public static double gap$get(MemorySegment seg) {
        return (double)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat gap;
     * }
     */
    public static void gap$set(MemorySegment seg, double x) {
        constants$27.const$3.set(seg, x);
    }
    public static double gap$get(MemorySegment seg, long index) {
        return (double)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void gap$set(MemorySegment seg, long index, double x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle relgap$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat relgap;
     * }
     */
    public static double relgap$get(MemorySegment seg) {
        return (double)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat relgap;
     * }
     */
    public static void relgap$set(MemorySegment seg, double x) {
        constants$27.const$4.set(seg, x);
    }
    public static double relgap$get(MemorySegment seg, long index) {
        return (double)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void relgap$set(MemorySegment seg, long index, double x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sigma$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat sigma;
     * }
     */
    public static double sigma$get(MemorySegment seg) {
        return (double)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat sigma;
     * }
     */
    public static void sigma$set(MemorySegment seg, double x) {
        constants$27.const$5.set(seg, x);
    }
    public static double sigma$get(MemorySegment seg, long index) {
        return (double)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sigma$set(MemorySegment seg, long index, double x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mu$VH() {
        return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat mu;
     * }
     */
    public static double mu$get(MemorySegment seg) {
        return (double)constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat mu;
     * }
     */
    public static void mu$set(MemorySegment seg, double x) {
        constants$28.const$0.set(seg, x);
    }
    public static double mu$get(MemorySegment seg, long index) {
        return (double)constants$28.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mu$set(MemorySegment seg, long index, double x) {
        constants$28.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle step$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat step;
     * }
     */
    public static double step$get(MemorySegment seg) {
        return (double)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat step;
     * }
     */
    public static void step$set(MemorySegment seg, double x) {
        constants$28.const$1.set(seg, x);
    }
    public static double step$get(MemorySegment seg, long index) {
        return (double)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void step$set(MemorySegment seg, long index, double x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle step_aff$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat step_aff;
     * }
     */
    public static double step_aff$get(MemorySegment seg) {
        return (double)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat step_aff;
     * }
     */
    public static void step_aff$set(MemorySegment seg, double x) {
        constants$28.const$2.set(seg, x);
    }
    public static double step_aff$get(MemorySegment seg, long index) {
        return (double)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void step_aff$set(MemorySegment seg, long index, double x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle kapovert$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat kapovert;
     * }
     */
    public static double kapovert$get(MemorySegment seg) {
        return (double)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat kapovert;
     * }
     */
    public static void kapovert$set(MemorySegment seg, double x) {
        constants$28.const$3.set(seg, x);
    }
    public static double kapovert$get(MemorySegment seg, long index) {
        return (double)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void kapovert$set(MemorySegment seg, long index, double x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iter$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint iter;
     * }
     */
    public static long iter$get(MemorySegment seg) {
        return (long)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint iter;
     * }
     */
    public static void iter$set(MemorySegment seg, long x) {
        constants$28.const$4.set(seg, x);
    }
    public static long iter$get(MemorySegment seg, long index) {
        return (long)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iter$set(MemorySegment seg, long index, long x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nitref1$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint nitref1;
     * }
     */
    public static long nitref1$get(MemorySegment seg) {
        return (long)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint nitref1;
     * }
     */
    public static void nitref1$set(MemorySegment seg, long x) {
        constants$28.const$5.set(seg, x);
    }
    public static long nitref1$get(MemorySegment seg, long index) {
        return (long)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nitref1$set(MemorySegment seg, long index, long x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nitref2$VH() {
        return constants$29.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint nitref2;
     * }
     */
    public static long nitref2$get(MemorySegment seg) {
        return (long)constants$29.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint nitref2;
     * }
     */
    public static void nitref2$set(MemorySegment seg, long x) {
        constants$29.const$0.set(seg, x);
    }
    public static long nitref2$get(MemorySegment seg, long index) {
        return (long)constants$29.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nitref2$set(MemorySegment seg, long index, long x) {
        constants$29.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nitref3$VH() {
        return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint nitref3;
     * }
     */
    public static long nitref3$get(MemorySegment seg) {
        return (long)constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint nitref3;
     * }
     */
    public static void nitref3$set(MemorySegment seg, long x) {
        constants$29.const$1.set(seg, x);
    }
    public static long nitref3$get(MemorySegment seg, long index) {
        return (long)constants$29.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nitref3$set(MemorySegment seg, long index, long x) {
        constants$29.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tsetup$VH() {
        return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat tsetup;
     * }
     */
    public static double tsetup$get(MemorySegment seg) {
        return (double)constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat tsetup;
     * }
     */
    public static void tsetup$set(MemorySegment seg, double x) {
        constants$29.const$2.set(seg, x);
    }
    public static double tsetup$get(MemorySegment seg, long index) {
        return (double)constants$29.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tsetup$set(MemorySegment seg, long index, double x) {
        constants$29.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tsolve$VH() {
        return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat tsolve;
     * }
     */
    public static double tsolve$get(MemorySegment seg) {
        return (double)constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat tsolve;
     * }
     */
    public static void tsolve$set(MemorySegment seg, double x) {
        constants$29.const$3.set(seg, x);
    }
    public static double tsolve$get(MemorySegment seg, long index) {
        return (double)constants$29.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tsolve$set(MemorySegment seg, long index, double x) {
        constants$29.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pob$VH() {
        return constants$29.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint pob;
     * }
     */
    public static long pob$get(MemorySegment seg) {
        return (long)constants$29.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint pob;
     * }
     */
    public static void pob$set(MemorySegment seg, long x) {
        constants$29.const$4.set(seg, x);
    }
    public static long pob$get(MemorySegment seg, long index) {
        return (long)constants$29.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pob$set(MemorySegment seg, long index, long x) {
        constants$29.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cb$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint cb;
     * }
     */
    public static long cb$get(MemorySegment seg) {
        return (long)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint cb;
     * }
     */
    public static void cb$set(MemorySegment seg, long x) {
        constants$29.const$5.set(seg, x);
    }
    public static long cb$get(MemorySegment seg, long index) {
        return (long)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, long x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cob$VH() {
        return constants$30.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint cob;
     * }
     */
    public static long cob$get(MemorySegment seg) {
        return (long)constants$30.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint cob;
     * }
     */
    public static void cob$set(MemorySegment seg, long x) {
        constants$30.const$0.set(seg, x);
    }
    public static long cob$get(MemorySegment seg, long index) {
        return (long)constants$30.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cob$set(MemorySegment seg, long index, long x) {
        constants$30.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pb$VH() {
        return constants$30.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint pb;
     * }
     */
    public static long pb$get(MemorySegment seg) {
        return (long)constants$30.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint pb;
     * }
     */
    public static void pb$set(MemorySegment seg, long x) {
        constants$30.const$1.set(seg, x);
    }
    public static long pb$get(MemorySegment seg, long index) {
        return (long)constants$30.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pb$set(MemorySegment seg, long index, long x) {
        constants$30.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle db$VH() {
        return constants$30.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint db;
     * }
     */
    public static long db$get(MemorySegment seg) {
        return (long)constants$30.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint db;
     * }
     */
    public static void db$set(MemorySegment seg, long x) {
        constants$30.const$2.set(seg, x);
    }
    public static long db$get(MemorySegment seg, long index) {
        return (long)constants$30.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void db$set(MemorySegment seg, long index, long x) {
        constants$30.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle affBack$VH() {
        return constants$30.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint affBack;
     * }
     */
    public static long affBack$get(MemorySegment seg) {
        return (long)constants$30.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint affBack;
     * }
     */
    public static void affBack$set(MemorySegment seg, long x) {
        constants$30.const$3.set(seg, x);
    }
    public static long affBack$get(MemorySegment seg, long index) {
        return (long)constants$30.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void affBack$set(MemorySegment seg, long index, long x) {
        constants$30.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cmbBack$VH() {
        return constants$30.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint cmbBack;
     * }
     */
    public static long cmbBack$get(MemorySegment seg) {
        return (long)constants$30.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint cmbBack;
     * }
     */
    public static void cmbBack$set(MemorySegment seg, long x) {
        constants$30.const$4.set(seg, x);
    }
    public static long cmbBack$get(MemorySegment seg, long index) {
        return (long)constants$30.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cmbBack$set(MemorySegment seg, long index, long x) {
        constants$30.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle centrality$VH() {
        return constants$30.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat centrality;
     * }
     */
    public static double centrality$get(MemorySegment seg) {
        return (double)constants$30.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat centrality;
     * }
     */
    public static void centrality$set(MemorySegment seg, double x) {
        constants$30.const$5.set(seg, x);
    }
    public static double centrality$get(MemorySegment seg, long index) {
        return (double)constants$30.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void centrality$set(MemorySegment seg, long index, double x) {
        constants$30.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


