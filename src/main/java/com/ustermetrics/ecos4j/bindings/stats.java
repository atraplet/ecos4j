// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct stats {
 *     pfloat pcost;
 *     pfloat dcost;
 *     pfloat pres;
 *     pfloat dres;
 *     pfloat pinf;
 *     pfloat dinf;
 *     pfloat pinfres;
 *     pfloat dinfres;
 *     pfloat gap;
 *     pfloat relgap;
 *     pfloat sigma;
 *     pfloat mu;
 *     pfloat step;
 *     pfloat step_aff;
 *     pfloat kapovert;
 *     idxint iter;
 *     idxint nitref1;
 *     idxint nitref2;
 *     idxint nitref3;
 *     pfloat tsetup;
 *     pfloat tsolve;
 *     idxint pob;
 *     idxint cb;
 *     idxint cob;
 *     idxint pb;
 *     idxint db;
 *     idxint affBack;
 *     idxint cmbBack;
 *     pfloat centrality;
 * }
 * }
 */
public class stats {

    stats() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecos_h.C_DOUBLE.withName("pcost"),
        ecos_h.C_DOUBLE.withName("dcost"),
        ecos_h.C_DOUBLE.withName("pres"),
        ecos_h.C_DOUBLE.withName("dres"),
        ecos_h.C_DOUBLE.withName("pinf"),
        ecos_h.C_DOUBLE.withName("dinf"),
        ecos_h.C_DOUBLE.withName("pinfres"),
        ecos_h.C_DOUBLE.withName("dinfres"),
        ecos_h.C_DOUBLE.withName("gap"),
        ecos_h.C_DOUBLE.withName("relgap"),
        ecos_h.C_DOUBLE.withName("sigma"),
        ecos_h.C_DOUBLE.withName("mu"),
        ecos_h.C_DOUBLE.withName("step"),
        ecos_h.C_DOUBLE.withName("step_aff"),
        ecos_h.C_DOUBLE.withName("kapovert"),
        ecos_h.C_LONG_LONG.withName("iter"),
        ecos_h.C_LONG_LONG.withName("nitref1"),
        ecos_h.C_LONG_LONG.withName("nitref2"),
        ecos_h.C_LONG_LONG.withName("nitref3"),
        ecos_h.C_DOUBLE.withName("tsetup"),
        ecos_h.C_DOUBLE.withName("tsolve"),
        ecos_h.C_LONG_LONG.withName("pob"),
        ecos_h.C_LONG_LONG.withName("cb"),
        ecos_h.C_LONG_LONG.withName("cob"),
        ecos_h.C_LONG_LONG.withName("pb"),
        ecos_h.C_LONG_LONG.withName("db"),
        ecos_h.C_LONG_LONG.withName("affBack"),
        ecos_h.C_LONG_LONG.withName("cmbBack"),
        ecos_h.C_DOUBLE.withName("centrality")
    ).withName("stats");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble pcost$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pcost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat pcost
     * }
     */
    public static final OfDouble pcost$layout() {
        return pcost$LAYOUT;
    }

    private static final long pcost$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat pcost
     * }
     */
    public static final long pcost$offset() {
        return pcost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat pcost
     * }
     */
    public static double pcost(MemorySegment struct) {
        return struct.get(pcost$LAYOUT, pcost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat pcost
     * }
     */
    public static void pcost(MemorySegment struct, double fieldValue) {
        struct.set(pcost$LAYOUT, pcost$OFFSET, fieldValue);
    }

    private static final OfDouble dcost$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dcost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat dcost
     * }
     */
    public static final OfDouble dcost$layout() {
        return dcost$LAYOUT;
    }

    private static final long dcost$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat dcost
     * }
     */
    public static final long dcost$offset() {
        return dcost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat dcost
     * }
     */
    public static double dcost(MemorySegment struct) {
        return struct.get(dcost$LAYOUT, dcost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat dcost
     * }
     */
    public static void dcost(MemorySegment struct, double fieldValue) {
        struct.set(dcost$LAYOUT, dcost$OFFSET, fieldValue);
    }

    private static final OfDouble pres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat pres
     * }
     */
    public static final OfDouble pres$layout() {
        return pres$LAYOUT;
    }

    private static final long pres$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat pres
     * }
     */
    public static final long pres$offset() {
        return pres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat pres
     * }
     */
    public static double pres(MemorySegment struct) {
        return struct.get(pres$LAYOUT, pres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat pres
     * }
     */
    public static void pres(MemorySegment struct, double fieldValue) {
        struct.set(pres$LAYOUT, pres$OFFSET, fieldValue);
    }

    private static final OfDouble dres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat dres
     * }
     */
    public static final OfDouble dres$layout() {
        return dres$LAYOUT;
    }

    private static final long dres$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat dres
     * }
     */
    public static final long dres$offset() {
        return dres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat dres
     * }
     */
    public static double dres(MemorySegment struct) {
        return struct.get(dres$LAYOUT, dres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat dres
     * }
     */
    public static void dres(MemorySegment struct, double fieldValue) {
        struct.set(dres$LAYOUT, dres$OFFSET, fieldValue);
    }

    private static final OfDouble pinf$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pinf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat pinf
     * }
     */
    public static final OfDouble pinf$layout() {
        return pinf$LAYOUT;
    }

    private static final long pinf$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat pinf
     * }
     */
    public static final long pinf$offset() {
        return pinf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat pinf
     * }
     */
    public static double pinf(MemorySegment struct) {
        return struct.get(pinf$LAYOUT, pinf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat pinf
     * }
     */
    public static void pinf(MemorySegment struct, double fieldValue) {
        struct.set(pinf$LAYOUT, pinf$OFFSET, fieldValue);
    }

    private static final OfDouble dinf$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dinf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat dinf
     * }
     */
    public static final OfDouble dinf$layout() {
        return dinf$LAYOUT;
    }

    private static final long dinf$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat dinf
     * }
     */
    public static final long dinf$offset() {
        return dinf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat dinf
     * }
     */
    public static double dinf(MemorySegment struct) {
        return struct.get(dinf$LAYOUT, dinf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat dinf
     * }
     */
    public static void dinf(MemorySegment struct, double fieldValue) {
        struct.set(dinf$LAYOUT, dinf$OFFSET, fieldValue);
    }

    private static final OfDouble pinfres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pinfres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat pinfres
     * }
     */
    public static final OfDouble pinfres$layout() {
        return pinfres$LAYOUT;
    }

    private static final long pinfres$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat pinfres
     * }
     */
    public static final long pinfres$offset() {
        return pinfres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat pinfres
     * }
     */
    public static double pinfres(MemorySegment struct) {
        return struct.get(pinfres$LAYOUT, pinfres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat pinfres
     * }
     */
    public static void pinfres(MemorySegment struct, double fieldValue) {
        struct.set(pinfres$LAYOUT, pinfres$OFFSET, fieldValue);
    }

    private static final OfDouble dinfres$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dinfres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat dinfres
     * }
     */
    public static final OfDouble dinfres$layout() {
        return dinfres$LAYOUT;
    }

    private static final long dinfres$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat dinfres
     * }
     */
    public static final long dinfres$offset() {
        return dinfres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat dinfres
     * }
     */
    public static double dinfres(MemorySegment struct) {
        return struct.get(dinfres$LAYOUT, dinfres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat dinfres
     * }
     */
    public static void dinfres(MemorySegment struct, double fieldValue) {
        struct.set(dinfres$LAYOUT, dinfres$OFFSET, fieldValue);
    }

    private static final OfDouble gap$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("gap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat gap
     * }
     */
    public static final OfDouble gap$layout() {
        return gap$LAYOUT;
    }

    private static final long gap$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat gap
     * }
     */
    public static final long gap$offset() {
        return gap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat gap
     * }
     */
    public static double gap(MemorySegment struct) {
        return struct.get(gap$LAYOUT, gap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat gap
     * }
     */
    public static void gap(MemorySegment struct, double fieldValue) {
        struct.set(gap$LAYOUT, gap$OFFSET, fieldValue);
    }

    private static final OfDouble relgap$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("relgap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat relgap
     * }
     */
    public static final OfDouble relgap$layout() {
        return relgap$LAYOUT;
    }

    private static final long relgap$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat relgap
     * }
     */
    public static final long relgap$offset() {
        return relgap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat relgap
     * }
     */
    public static double relgap(MemorySegment struct) {
        return struct.get(relgap$LAYOUT, relgap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat relgap
     * }
     */
    public static void relgap(MemorySegment struct, double fieldValue) {
        struct.set(relgap$LAYOUT, relgap$OFFSET, fieldValue);
    }

    private static final OfDouble sigma$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sigma"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat sigma
     * }
     */
    public static final OfDouble sigma$layout() {
        return sigma$LAYOUT;
    }

    private static final long sigma$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat sigma
     * }
     */
    public static final long sigma$offset() {
        return sigma$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat sigma
     * }
     */
    public static double sigma(MemorySegment struct) {
        return struct.get(sigma$LAYOUT, sigma$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat sigma
     * }
     */
    public static void sigma(MemorySegment struct, double fieldValue) {
        struct.set(sigma$LAYOUT, sigma$OFFSET, fieldValue);
    }

    private static final OfDouble mu$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("mu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat mu
     * }
     */
    public static final OfDouble mu$layout() {
        return mu$LAYOUT;
    }

    private static final long mu$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat mu
     * }
     */
    public static final long mu$offset() {
        return mu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat mu
     * }
     */
    public static double mu(MemorySegment struct) {
        return struct.get(mu$LAYOUT, mu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat mu
     * }
     */
    public static void mu(MemorySegment struct, double fieldValue) {
        struct.set(mu$LAYOUT, mu$OFFSET, fieldValue);
    }

    private static final OfDouble step$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("step"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat step
     * }
     */
    public static final OfDouble step$layout() {
        return step$LAYOUT;
    }

    private static final long step$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat step
     * }
     */
    public static final long step$offset() {
        return step$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat step
     * }
     */
    public static double step(MemorySegment struct) {
        return struct.get(step$LAYOUT, step$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat step
     * }
     */
    public static void step(MemorySegment struct, double fieldValue) {
        struct.set(step$LAYOUT, step$OFFSET, fieldValue);
    }

    private static final OfDouble step_aff$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("step_aff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat step_aff
     * }
     */
    public static final OfDouble step_aff$layout() {
        return step_aff$LAYOUT;
    }

    private static final long step_aff$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat step_aff
     * }
     */
    public static final long step_aff$offset() {
        return step_aff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat step_aff
     * }
     */
    public static double step_aff(MemorySegment struct) {
        return struct.get(step_aff$LAYOUT, step_aff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat step_aff
     * }
     */
    public static void step_aff(MemorySegment struct, double fieldValue) {
        struct.set(step_aff$LAYOUT, step_aff$OFFSET, fieldValue);
    }

    private static final OfDouble kapovert$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("kapovert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat kapovert
     * }
     */
    public static final OfDouble kapovert$layout() {
        return kapovert$LAYOUT;
    }

    private static final long kapovert$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat kapovert
     * }
     */
    public static final long kapovert$offset() {
        return kapovert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat kapovert
     * }
     */
    public static double kapovert(MemorySegment struct) {
        return struct.get(kapovert$LAYOUT, kapovert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat kapovert
     * }
     */
    public static void kapovert(MemorySegment struct, double fieldValue) {
        struct.set(kapovert$LAYOUT, kapovert$OFFSET, fieldValue);
    }

    private static final OfLong iter$LAYOUT = (OfLong)$LAYOUT.select(groupElement("iter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint iter
     * }
     */
    public static final OfLong iter$layout() {
        return iter$LAYOUT;
    }

    private static final long iter$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint iter
     * }
     */
    public static final long iter$offset() {
        return iter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint iter
     * }
     */
    public static long iter(MemorySegment struct) {
        return struct.get(iter$LAYOUT, iter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint iter
     * }
     */
    public static void iter(MemorySegment struct, long fieldValue) {
        struct.set(iter$LAYOUT, iter$OFFSET, fieldValue);
    }

    private static final OfLong nitref1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nitref1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint nitref1
     * }
     */
    public static final OfLong nitref1$layout() {
        return nitref1$LAYOUT;
    }

    private static final long nitref1$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint nitref1
     * }
     */
    public static final long nitref1$offset() {
        return nitref1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint nitref1
     * }
     */
    public static long nitref1(MemorySegment struct) {
        return struct.get(nitref1$LAYOUT, nitref1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint nitref1
     * }
     */
    public static void nitref1(MemorySegment struct, long fieldValue) {
        struct.set(nitref1$LAYOUT, nitref1$OFFSET, fieldValue);
    }

    private static final OfLong nitref2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nitref2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint nitref2
     * }
     */
    public static final OfLong nitref2$layout() {
        return nitref2$LAYOUT;
    }

    private static final long nitref2$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint nitref2
     * }
     */
    public static final long nitref2$offset() {
        return nitref2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint nitref2
     * }
     */
    public static long nitref2(MemorySegment struct) {
        return struct.get(nitref2$LAYOUT, nitref2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint nitref2
     * }
     */
    public static void nitref2(MemorySegment struct, long fieldValue) {
        struct.set(nitref2$LAYOUT, nitref2$OFFSET, fieldValue);
    }

    private static final OfLong nitref3$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nitref3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint nitref3
     * }
     */
    public static final OfLong nitref3$layout() {
        return nitref3$LAYOUT;
    }

    private static final long nitref3$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint nitref3
     * }
     */
    public static final long nitref3$offset() {
        return nitref3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint nitref3
     * }
     */
    public static long nitref3(MemorySegment struct) {
        return struct.get(nitref3$LAYOUT, nitref3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint nitref3
     * }
     */
    public static void nitref3(MemorySegment struct, long fieldValue) {
        struct.set(nitref3$LAYOUT, nitref3$OFFSET, fieldValue);
    }

    private static final OfDouble tsetup$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tsetup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat tsetup
     * }
     */
    public static final OfDouble tsetup$layout() {
        return tsetup$LAYOUT;
    }

    private static final long tsetup$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat tsetup
     * }
     */
    public static final long tsetup$offset() {
        return tsetup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat tsetup
     * }
     */
    public static double tsetup(MemorySegment struct) {
        return struct.get(tsetup$LAYOUT, tsetup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat tsetup
     * }
     */
    public static void tsetup(MemorySegment struct, double fieldValue) {
        struct.set(tsetup$LAYOUT, tsetup$OFFSET, fieldValue);
    }

    private static final OfDouble tsolve$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tsolve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat tsolve
     * }
     */
    public static final OfDouble tsolve$layout() {
        return tsolve$LAYOUT;
    }

    private static final long tsolve$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat tsolve
     * }
     */
    public static final long tsolve$offset() {
        return tsolve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat tsolve
     * }
     */
    public static double tsolve(MemorySegment struct) {
        return struct.get(tsolve$LAYOUT, tsolve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat tsolve
     * }
     */
    public static void tsolve(MemorySegment struct, double fieldValue) {
        struct.set(tsolve$LAYOUT, tsolve$OFFSET, fieldValue);
    }

    private static final OfLong pob$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint pob
     * }
     */
    public static final OfLong pob$layout() {
        return pob$LAYOUT;
    }

    private static final long pob$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint pob
     * }
     */
    public static final long pob$offset() {
        return pob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint pob
     * }
     */
    public static long pob(MemorySegment struct) {
        return struct.get(pob$LAYOUT, pob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint pob
     * }
     */
    public static void pob(MemorySegment struct, long fieldValue) {
        struct.set(pob$LAYOUT, pob$OFFSET, fieldValue);
    }

    private static final OfLong cb$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint cb
     * }
     */
    public static final OfLong cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint cb
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint cb
     * }
     */
    public static long cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint cb
     * }
     */
    public static void cb(MemorySegment struct, long fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final OfLong cob$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint cob
     * }
     */
    public static final OfLong cob$layout() {
        return cob$LAYOUT;
    }

    private static final long cob$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint cob
     * }
     */
    public static final long cob$offset() {
        return cob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint cob
     * }
     */
    public static long cob(MemorySegment struct) {
        return struct.get(cob$LAYOUT, cob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint cob
     * }
     */
    public static void cob(MemorySegment struct, long fieldValue) {
        struct.set(cob$LAYOUT, cob$OFFSET, fieldValue);
    }

    private static final OfLong pb$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint pb
     * }
     */
    public static final OfLong pb$layout() {
        return pb$LAYOUT;
    }

    private static final long pb$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint pb
     * }
     */
    public static final long pb$offset() {
        return pb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint pb
     * }
     */
    public static long pb(MemorySegment struct) {
        return struct.get(pb$LAYOUT, pb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint pb
     * }
     */
    public static void pb(MemorySegment struct, long fieldValue) {
        struct.set(pb$LAYOUT, pb$OFFSET, fieldValue);
    }

    private static final OfLong db$LAYOUT = (OfLong)$LAYOUT.select(groupElement("db"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint db
     * }
     */
    public static final OfLong db$layout() {
        return db$LAYOUT;
    }

    private static final long db$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint db
     * }
     */
    public static final long db$offset() {
        return db$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint db
     * }
     */
    public static long db(MemorySegment struct) {
        return struct.get(db$LAYOUT, db$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint db
     * }
     */
    public static void db(MemorySegment struct, long fieldValue) {
        struct.set(db$LAYOUT, db$OFFSET, fieldValue);
    }

    private static final OfLong affBack$LAYOUT = (OfLong)$LAYOUT.select(groupElement("affBack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint affBack
     * }
     */
    public static final OfLong affBack$layout() {
        return affBack$LAYOUT;
    }

    private static final long affBack$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint affBack
     * }
     */
    public static final long affBack$offset() {
        return affBack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint affBack
     * }
     */
    public static long affBack(MemorySegment struct) {
        return struct.get(affBack$LAYOUT, affBack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint affBack
     * }
     */
    public static void affBack(MemorySegment struct, long fieldValue) {
        struct.set(affBack$LAYOUT, affBack$OFFSET, fieldValue);
    }

    private static final OfLong cmbBack$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cmbBack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint cmbBack
     * }
     */
    public static final OfLong cmbBack$layout() {
        return cmbBack$LAYOUT;
    }

    private static final long cmbBack$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint cmbBack
     * }
     */
    public static final long cmbBack$offset() {
        return cmbBack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint cmbBack
     * }
     */
    public static long cmbBack(MemorySegment struct) {
        return struct.get(cmbBack$LAYOUT, cmbBack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint cmbBack
     * }
     */
    public static void cmbBack(MemorySegment struct, long fieldValue) {
        struct.set(cmbBack$LAYOUT, cmbBack$OFFSET, fieldValue);
    }

    private static final OfDouble centrality$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("centrality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat centrality
     * }
     */
    public static final OfDouble centrality$layout() {
        return centrality$LAYOUT;
    }

    private static final long centrality$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat centrality
     * }
     */
    public static final long centrality$offset() {
        return centrality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat centrality
     * }
     */
    public static double centrality(MemorySegment struct) {
        return struct.get(centrality$LAYOUT, centrality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat centrality
     * }
     */
    public static void centrality(MemorySegment struct, double fieldValue) {
        struct.set(centrality$LAYOUT, centrality$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

