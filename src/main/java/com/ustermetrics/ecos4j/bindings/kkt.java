// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct kkt {
 *     spmat* PKPt;
 *     spmat* L;
 *     pfloat* D;
 *     pfloat* work1;
 *     pfloat* work2;
 *     pfloat* work3;
 *     pfloat* work4;
 *     pfloat* work5;
 *     pfloat* work6;
 *     pfloat* RHS1;
 *     pfloat* RHS2;
 *     pfloat* dx1;
 *     pfloat* dx2;
 *     pfloat* dy1;
 *     pfloat* dy2;
 *     pfloat* dz1;
 *     pfloat* dz2;
 *     idxint* P;
 *     idxint* Pinv;
 *     idxint* PK;
 *     idxint* Parent;
 *     idxint* Sign;
 *     idxint* Pattern;
 *     idxint* Flag;
 *     idxint* Lnz;
 *     pfloat delta;
 * };
 * }
 */
public class kkt {

    public static MemoryLayout $LAYOUT() {
        return constants$17.const$0;
    }
    public static VarHandle PKPt$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * spmat* PKPt;
     * }
     */
    public static MemorySegment PKPt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * spmat* PKPt;
     * }
     */
    public static void PKPt$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$1.set(seg, x);
    }
    public static MemorySegment PKPt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void PKPt$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle L$VH() {
        return constants$17.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * spmat* L;
     * }
     */
    public static MemorySegment L$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * spmat* L;
     * }
     */
    public static void L$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$2.set(seg, x);
    }
    public static MemorySegment L$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void L$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle D$VH() {
        return constants$17.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* D;
     * }
     */
    public static MemorySegment D$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* D;
     * }
     */
    public static void D$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$3.set(seg, x);
    }
    public static MemorySegment D$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void D$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work1$VH() {
        return constants$17.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work1;
     * }
     */
    public static MemorySegment work1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work1;
     * }
     */
    public static void work1$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$4.set(seg, x);
    }
    public static MemorySegment work1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void work1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work2$VH() {
        return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work2;
     * }
     */
    public static MemorySegment work2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work2;
     * }
     */
    public static void work2$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$5.set(seg, x);
    }
    public static MemorySegment work2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void work2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work3$VH() {
        return constants$18.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work3;
     * }
     */
    public static MemorySegment work3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work3;
     * }
     */
    public static void work3$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$0.set(seg, x);
    }
    public static MemorySegment work3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void work3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work4$VH() {
        return constants$18.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work4;
     * }
     */
    public static MemorySegment work4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work4;
     * }
     */
    public static void work4$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$1.set(seg, x);
    }
    public static MemorySegment work4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void work4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work5$VH() {
        return constants$18.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work5;
     * }
     */
    public static MemorySegment work5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work5;
     * }
     */
    public static void work5$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$2.set(seg, x);
    }
    public static MemorySegment work5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void work5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work6$VH() {
        return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* work6;
     * }
     */
    public static MemorySegment work6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* work6;
     * }
     */
    public static void work6$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$3.set(seg, x);
    }
    public static MemorySegment work6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void work6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RHS1$VH() {
        return constants$18.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* RHS1;
     * }
     */
    public static MemorySegment RHS1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* RHS1;
     * }
     */
    public static void RHS1$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$4.set(seg, x);
    }
    public static MemorySegment RHS1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void RHS1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RHS2$VH() {
        return constants$18.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* RHS2;
     * }
     */
    public static MemorySegment RHS2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* RHS2;
     * }
     */
    public static void RHS2$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$5.set(seg, x);
    }
    public static MemorySegment RHS2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RHS2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dx1$VH() {
        return constants$19.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dx1;
     * }
     */
    public static MemorySegment dx1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dx1;
     * }
     */
    public static void dx1$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$0.set(seg, x);
    }
    public static MemorySegment dx1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dx1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dx2$VH() {
        return constants$19.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dx2;
     * }
     */
    public static MemorySegment dx2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dx2;
     * }
     */
    public static void dx2$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$1.set(seg, x);
    }
    public static MemorySegment dx2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dx2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dy1$VH() {
        return constants$19.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dy1;
     * }
     */
    public static MemorySegment dy1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dy1;
     * }
     */
    public static void dy1$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$2.set(seg, x);
    }
    public static MemorySegment dy1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dy1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dy2$VH() {
        return constants$19.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dy2;
     * }
     */
    public static MemorySegment dy2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dy2;
     * }
     */
    public static void dy2$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$3.set(seg, x);
    }
    public static MemorySegment dy2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dy2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dz1$VH() {
        return constants$19.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dz1;
     * }
     */
    public static MemorySegment dz1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dz1;
     * }
     */
    public static void dz1$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$4.set(seg, x);
    }
    public static MemorySegment dz1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dz1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dz2$VH() {
        return constants$19.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dz2;
     * }
     */
    public static MemorySegment dz2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dz2;
     * }
     */
    public static void dz2$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$5.set(seg, x);
    }
    public static MemorySegment dz2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dz2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle P$VH() {
        return constants$20.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* P;
     * }
     */
    public static MemorySegment P$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* P;
     * }
     */
    public static void P$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$0.set(seg, x);
    }
    public static MemorySegment P$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void P$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Pinv$VH() {
        return constants$20.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Pinv;
     * }
     */
    public static MemorySegment Pinv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Pinv;
     * }
     */
    public static void Pinv$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$1.set(seg, x);
    }
    public static MemorySegment Pinv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Pinv$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PK$VH() {
        return constants$20.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* PK;
     * }
     */
    public static MemorySegment PK$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* PK;
     * }
     */
    public static void PK$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$2.set(seg, x);
    }
    public static MemorySegment PK$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PK$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Parent$VH() {
        return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Parent;
     * }
     */
    public static MemorySegment Parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Parent;
     * }
     */
    public static void Parent$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$3.set(seg, x);
    }
    public static MemorySegment Parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sign$VH() {
        return constants$20.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Sign;
     * }
     */
    public static MemorySegment Sign$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Sign;
     * }
     */
    public static void Sign$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$4.set(seg, x);
    }
    public static MemorySegment Sign$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Sign$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Pattern$VH() {
        return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Pattern;
     * }
     */
    public static MemorySegment Pattern$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Pattern;
     * }
     */
    public static void Pattern$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$5.set(seg, x);
    }
    public static MemorySegment Pattern$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Pattern$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Flag$VH() {
        return constants$21.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Flag;
     * }
     */
    public static MemorySegment Flag$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Flag;
     * }
     */
    public static void Flag$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$0.set(seg, x);
    }
    public static MemorySegment Flag$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Flag$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Lnz$VH() {
        return constants$21.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Lnz;
     * }
     */
    public static MemorySegment Lnz$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Lnz;
     * }
     */
    public static void Lnz$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$1.set(seg, x);
    }
    public static MemorySegment Lnz$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Lnz$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle delta$VH() {
        return constants$21.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat delta;
     * }
     */
    public static double delta$get(MemorySegment seg) {
        return (double)constants$21.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat delta;
     * }
     */
    public static void delta$set(MemorySegment seg, double x) {
        constants$21.const$2.set(seg, x);
    }
    public static double delta$get(MemorySegment seg, long index) {
        return (double)constants$21.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void delta$set(MemorySegment seg, long index, double x) {
        constants$21.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


