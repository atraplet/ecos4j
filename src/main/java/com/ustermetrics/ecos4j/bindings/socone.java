// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct socone {
 *     idxint p;
 *     pfloat* skbar;
 *     pfloat* zkbar;
 *     pfloat a;
 *     pfloat d1;
 *     pfloat w;
 *     pfloat eta;
 *     pfloat eta_square;
 *     pfloat* q;
 *     idxint* Didx;
 *     pfloat u0;
 *     pfloat u1;
 *     pfloat v1;
 * };
 * }
 */
public class socone {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$3;
    }
    public static VarHandle p$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint p;
     * }
     */
    public static long p$get(MemorySegment seg) {
        return (long)constants$10.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint p;
     * }
     */
    public static void p$set(MemorySegment seg, long x) {
        constants$10.const$4.set(seg, x);
    }
    public static long p$get(MemorySegment seg, long index) {
        return (long)constants$10.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, long x) {
        constants$10.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skbar$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* skbar;
     * }
     */
    public static MemorySegment skbar$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* skbar;
     * }
     */
    public static void skbar$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$5.set(seg, x);
    }
    public static MemorySegment skbar$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void skbar$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle zkbar$VH() {
        return constants$11.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* zkbar;
     * }
     */
    public static MemorySegment zkbar$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* zkbar;
     * }
     */
    public static void zkbar$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$0.set(seg, x);
    }
    public static MemorySegment zkbar$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void zkbar$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle a$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat a;
     * }
     */
    public static double a$get(MemorySegment seg) {
        return (double)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat a;
     * }
     */
    public static void a$set(MemorySegment seg, double x) {
        constants$11.const$1.set(seg, x);
    }
    public static double a$get(MemorySegment seg, long index) {
        return (double)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void a$set(MemorySegment seg, long index, double x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle d1$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat d1;
     * }
     */
    public static double d1$get(MemorySegment seg) {
        return (double)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat d1;
     * }
     */
    public static void d1$set(MemorySegment seg, double x) {
        constants$11.const$2.set(seg, x);
    }
    public static double d1$get(MemorySegment seg, long index) {
        return (double)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void d1$set(MemorySegment seg, long index, double x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle w$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat w;
     * }
     */
    public static double w$get(MemorySegment seg) {
        return (double)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat w;
     * }
     */
    public static void w$set(MemorySegment seg, double x) {
        constants$11.const$3.set(seg, x);
    }
    public static double w$get(MemorySegment seg, long index) {
        return (double)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void w$set(MemorySegment seg, long index, double x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eta$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat eta;
     * }
     */
    public static double eta$get(MemorySegment seg) {
        return (double)constants$11.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat eta;
     * }
     */
    public static void eta$set(MemorySegment seg, double x) {
        constants$11.const$4.set(seg, x);
    }
    public static double eta$get(MemorySegment seg, long index) {
        return (double)constants$11.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void eta$set(MemorySegment seg, long index, double x) {
        constants$11.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle eta_square$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat eta_square;
     * }
     */
    public static double eta_square$get(MemorySegment seg) {
        return (double)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat eta_square;
     * }
     */
    public static void eta_square$set(MemorySegment seg, double x) {
        constants$11.const$5.set(seg, x);
    }
    public static double eta_square$get(MemorySegment seg, long index) {
        return (double)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void eta_square$set(MemorySegment seg, long index, double x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle q$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* q;
     * }
     */
    public static MemorySegment q$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* q;
     * }
     */
    public static void q$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$0.set(seg, x);
    }
    public static MemorySegment q$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void q$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Didx$VH() {
        return constants$12.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* Didx;
     * }
     */
    public static MemorySegment Didx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* Didx;
     * }
     */
    public static void Didx$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$1.set(seg, x);
    }
    public static MemorySegment Didx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Didx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle u0$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat u0;
     * }
     */
    public static double u0$get(MemorySegment seg) {
        return (double)constants$12.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat u0;
     * }
     */
    public static void u0$set(MemorySegment seg, double x) {
        constants$12.const$2.set(seg, x);
    }
    public static double u0$get(MemorySegment seg, long index) {
        return (double)constants$12.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void u0$set(MemorySegment seg, long index, double x) {
        constants$12.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle u1$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat u1;
     * }
     */
    public static double u1$get(MemorySegment seg) {
        return (double)constants$12.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat u1;
     * }
     */
    public static void u1$set(MemorySegment seg, double x) {
        constants$12.const$3.set(seg, x);
    }
    public static double u1$get(MemorySegment seg, long index) {
        return (double)constants$12.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void u1$set(MemorySegment seg, long index, double x) {
        constants$12.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle v1$VH() {
        return constants$12.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat v1;
     * }
     */
    public static double v1$get(MemorySegment seg) {
        return (double)constants$12.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat v1;
     * }
     */
    public static void v1$set(MemorySegment seg, double x) {
        constants$12.const$4.set(seg, x);
    }
    public static double v1$get(MemorySegment seg, long index) {
        return (double)constants$12.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void v1$set(MemorySegment seg, long index, double x) {
        constants$12.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


