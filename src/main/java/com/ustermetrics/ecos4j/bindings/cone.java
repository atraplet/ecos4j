// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct cone {
 *     lpcone* lpc;
 *     socone* soc;
 *     idxint nsoc;
 *     expcone* expc;
 *     idxint nexc;
 *     idxint fexv;
 * };
 * }
 */
public class cone {

    public static MemoryLayout $LAYOUT() {
        return constants$12.const$5;
    }
    public static VarHandle lpc$VH() {
        return constants$13.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * lpcone* lpc;
     * }
     */
    public static MemorySegment lpc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * lpcone* lpc;
     * }
     */
    public static void lpc$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$0.set(seg, x);
    }
    public static MemorySegment lpc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lpc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle soc$VH() {
        return constants$13.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * socone* soc;
     * }
     */
    public static MemorySegment soc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * socone* soc;
     * }
     */
    public static void soc$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$1.set(seg, x);
    }
    public static MemorySegment soc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void soc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nsoc$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint nsoc;
     * }
     */
    public static long nsoc$get(MemorySegment seg) {
        return (long)constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint nsoc;
     * }
     */
    public static void nsoc$set(MemorySegment seg, long x) {
        constants$13.const$2.set(seg, x);
    }
    public static long nsoc$get(MemorySegment seg, long index) {
        return (long)constants$13.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nsoc$set(MemorySegment seg, long index, long x) {
        constants$13.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle expc$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * expcone* expc;
     * }
     */
    public static MemorySegment expc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * expcone* expc;
     * }
     */
    public static void expc$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$3.set(seg, x);
    }
    public static MemorySegment expc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void expc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nexc$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint nexc;
     * }
     */
    public static long nexc$get(MemorySegment seg) {
        return (long)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint nexc;
     * }
     */
    public static void nexc$set(MemorySegment seg, long x) {
        constants$13.const$4.set(seg, x);
    }
    public static long nexc$get(MemorySegment seg, long index) {
        return (long)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nexc$set(MemorySegment seg, long index, long x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fexv$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint fexv;
     * }
     */
    public static long fexv$get(MemorySegment seg) {
        return (long)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint fexv;
     * }
     */
    public static void fexv$set(MemorySegment seg, long x) {
        constants$13.const$5.set(seg, x);
    }
    public static long fexv$get(MemorySegment seg, long index) {
        return (long)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fexv$set(MemorySegment seg, long index, long x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


