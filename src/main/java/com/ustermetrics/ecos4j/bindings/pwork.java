// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pwork {
 *     idxint n;
 *     idxint m;
 *     idxint p;
 *     idxint D;
 *     pfloat *x;
 *     pfloat *y;
 *     pfloat *z;
 *     pfloat *s;
 *     pfloat *lambda;
 *     pfloat kap;
 *     pfloat tau;
 *     pfloat *best_x;
 *     pfloat *best_y;
 *     pfloat *best_z;
 *     pfloat *best_s;
 *     pfloat best_kap;
 *     pfloat best_tau;
 *     pfloat best_cx;
 *     pfloat best_by;
 *     pfloat best_hz;
 *     stats *best_info;
 *     pfloat *dsaff;
 *     pfloat *dzaff;
 *     pfloat *W_times_dzaff;
 *     pfloat *dsaff_by_W;
 *     pfloat *saff;
 *     pfloat *zaff;
 *     cone *C;
 *     spmat *A;
 *     spmat *G;
 *     pfloat *c;
 *     pfloat *b;
 *     pfloat *h;
 *     idxint *AtoK;
 *     idxint *GtoK;
 *     pfloat *xequil;
 *     pfloat *Aequil;
 *     pfloat *Gequil;
 *     pfloat resx0;
 *     pfloat resy0;
 *     pfloat resz0;
 *     pfloat *rx;
 *     pfloat *ry;
 *     pfloat *rz;
 *     pfloat rt;
 *     pfloat hresx;
 *     pfloat hresy;
 *     pfloat hresz;
 *     pfloat nx;
 *     pfloat ny;
 *     pfloat nz;
 *     pfloat ns;
 *     pfloat cx;
 *     pfloat by;
 *     pfloat hz;
 *     pfloat sz;
 *     kkt *KKT;
 *     stats *info;
 *     settings *stgs;
 * }
 * }
 */
public class pwork {

    pwork() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecos_h.C_LONG_LONG.withName("n"),
        ecos_h.C_LONG_LONG.withName("m"),
        ecos_h.C_LONG_LONG.withName("p"),
        ecos_h.C_LONG_LONG.withName("D"),
        ecos_h.C_POINTER.withName("x"),
        ecos_h.C_POINTER.withName("y"),
        ecos_h.C_POINTER.withName("z"),
        ecos_h.C_POINTER.withName("s"),
        ecos_h.C_POINTER.withName("lambda"),
        ecos_h.C_DOUBLE.withName("kap"),
        ecos_h.C_DOUBLE.withName("tau"),
        ecos_h.C_POINTER.withName("best_x"),
        ecos_h.C_POINTER.withName("best_y"),
        ecos_h.C_POINTER.withName("best_z"),
        ecos_h.C_POINTER.withName("best_s"),
        ecos_h.C_DOUBLE.withName("best_kap"),
        ecos_h.C_DOUBLE.withName("best_tau"),
        ecos_h.C_DOUBLE.withName("best_cx"),
        ecos_h.C_DOUBLE.withName("best_by"),
        ecos_h.C_DOUBLE.withName("best_hz"),
        ecos_h.C_POINTER.withName("best_info"),
        ecos_h.C_POINTER.withName("dsaff"),
        ecos_h.C_POINTER.withName("dzaff"),
        ecos_h.C_POINTER.withName("W_times_dzaff"),
        ecos_h.C_POINTER.withName("dsaff_by_W"),
        ecos_h.C_POINTER.withName("saff"),
        ecos_h.C_POINTER.withName("zaff"),
        ecos_h.C_POINTER.withName("C"),
        ecos_h.C_POINTER.withName("A"),
        ecos_h.C_POINTER.withName("G"),
        ecos_h.C_POINTER.withName("c"),
        ecos_h.C_POINTER.withName("b"),
        ecos_h.C_POINTER.withName("h"),
        ecos_h.C_POINTER.withName("AtoK"),
        ecos_h.C_POINTER.withName("GtoK"),
        ecos_h.C_POINTER.withName("xequil"),
        ecos_h.C_POINTER.withName("Aequil"),
        ecos_h.C_POINTER.withName("Gequil"),
        ecos_h.C_DOUBLE.withName("resx0"),
        ecos_h.C_DOUBLE.withName("resy0"),
        ecos_h.C_DOUBLE.withName("resz0"),
        ecos_h.C_POINTER.withName("rx"),
        ecos_h.C_POINTER.withName("ry"),
        ecos_h.C_POINTER.withName("rz"),
        ecos_h.C_DOUBLE.withName("rt"),
        ecos_h.C_DOUBLE.withName("hresx"),
        ecos_h.C_DOUBLE.withName("hresy"),
        ecos_h.C_DOUBLE.withName("hresz"),
        ecos_h.C_DOUBLE.withName("nx"),
        ecos_h.C_DOUBLE.withName("ny"),
        ecos_h.C_DOUBLE.withName("nz"),
        ecos_h.C_DOUBLE.withName("ns"),
        ecos_h.C_DOUBLE.withName("cx"),
        ecos_h.C_DOUBLE.withName("by"),
        ecos_h.C_DOUBLE.withName("hz"),
        ecos_h.C_DOUBLE.withName("sz"),
        ecos_h.C_POINTER.withName("KKT"),
        ecos_h.C_POINTER.withName("info"),
        ecos_h.C_POINTER.withName("stgs")
    ).withName("pwork");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint n
     * }
     */
    public static final OfLong n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint n
     * }
     */
    public static long n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint n
     * }
     */
    public static void n(MemorySegment struct, long fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final OfLong m$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint m
     * }
     */
    public static final OfLong m$layout() {
        return m$LAYOUT;
    }

    private static final long m$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint m
     * }
     */
    public static final long m$offset() {
        return m$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint m
     * }
     */
    public static long m(MemorySegment struct) {
        return struct.get(m$LAYOUT, m$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint m
     * }
     */
    public static void m(MemorySegment struct, long fieldValue) {
        struct.set(m$LAYOUT, m$OFFSET, fieldValue);
    }

    private static final OfLong p$LAYOUT = (OfLong)$LAYOUT.select(groupElement("p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint p
     * }
     */
    public static final OfLong p$layout() {
        return p$LAYOUT;
    }

    private static final long p$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint p
     * }
     */
    public static final long p$offset() {
        return p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint p
     * }
     */
    public static long p(MemorySegment struct) {
        return struct.get(p$LAYOUT, p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint p
     * }
     */
    public static void p(MemorySegment struct, long fieldValue) {
        struct.set(p$LAYOUT, p$OFFSET, fieldValue);
    }

    private static final OfLong D$LAYOUT = (OfLong)$LAYOUT.select(groupElement("D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint D
     * }
     */
    public static final OfLong D$layout() {
        return D$LAYOUT;
    }

    private static final long D$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint D
     * }
     */
    public static final long D$offset() {
        return D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint D
     * }
     */
    public static long D(MemorySegment struct) {
        return struct.get(D$LAYOUT, D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint D
     * }
     */
    public static void D(MemorySegment struct, long fieldValue) {
        struct.set(D$LAYOUT, D$OFFSET, fieldValue);
    }

    private static final AddressLayout x$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *x
     * }
     */
    public static final AddressLayout x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *x
     * }
     */
    public static MemorySegment x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *x
     * }
     */
    public static void x(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final AddressLayout y$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *y
     * }
     */
    public static final AddressLayout y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *y
     * }
     */
    public static MemorySegment y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *y
     * }
     */
    public static void y(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final AddressLayout z$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *z
     * }
     */
    public static final AddressLayout z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *z
     * }
     */
    public static MemorySegment z(MemorySegment struct) {
        return struct.get(z$LAYOUT, z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *z
     * }
     */
    public static void z(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(z$LAYOUT, z$OFFSET, fieldValue);
    }

    private static final AddressLayout s$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *s
     * }
     */
    public static final AddressLayout s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *s
     * }
     */
    public static MemorySegment s(MemorySegment struct) {
        return struct.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *s
     * }
     */
    public static void s(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final AddressLayout lambda$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lambda"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *lambda
     * }
     */
    public static final AddressLayout lambda$layout() {
        return lambda$LAYOUT;
    }

    private static final long lambda$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *lambda
     * }
     */
    public static final long lambda$offset() {
        return lambda$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *lambda
     * }
     */
    public static MemorySegment lambda(MemorySegment struct) {
        return struct.get(lambda$LAYOUT, lambda$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *lambda
     * }
     */
    public static void lambda(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lambda$LAYOUT, lambda$OFFSET, fieldValue);
    }

    private static final OfDouble kap$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("kap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat kap
     * }
     */
    public static final OfDouble kap$layout() {
        return kap$LAYOUT;
    }

    private static final long kap$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat kap
     * }
     */
    public static final long kap$offset() {
        return kap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat kap
     * }
     */
    public static double kap(MemorySegment struct) {
        return struct.get(kap$LAYOUT, kap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat kap
     * }
     */
    public static void kap(MemorySegment struct, double fieldValue) {
        struct.set(kap$LAYOUT, kap$OFFSET, fieldValue);
    }

    private static final OfDouble tau$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tau"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat tau
     * }
     */
    public static final OfDouble tau$layout() {
        return tau$LAYOUT;
    }

    private static final long tau$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat tau
     * }
     */
    public static final long tau$offset() {
        return tau$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat tau
     * }
     */
    public static double tau(MemorySegment struct) {
        return struct.get(tau$LAYOUT, tau$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat tau
     * }
     */
    public static void tau(MemorySegment struct, double fieldValue) {
        struct.set(tau$LAYOUT, tau$OFFSET, fieldValue);
    }

    private static final AddressLayout best_x$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("best_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *best_x
     * }
     */
    public static final AddressLayout best_x$layout() {
        return best_x$LAYOUT;
    }

    private static final long best_x$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *best_x
     * }
     */
    public static final long best_x$offset() {
        return best_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *best_x
     * }
     */
    public static MemorySegment best_x(MemorySegment struct) {
        return struct.get(best_x$LAYOUT, best_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *best_x
     * }
     */
    public static void best_x(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(best_x$LAYOUT, best_x$OFFSET, fieldValue);
    }

    private static final AddressLayout best_y$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("best_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *best_y
     * }
     */
    public static final AddressLayout best_y$layout() {
        return best_y$LAYOUT;
    }

    private static final long best_y$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *best_y
     * }
     */
    public static final long best_y$offset() {
        return best_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *best_y
     * }
     */
    public static MemorySegment best_y(MemorySegment struct) {
        return struct.get(best_y$LAYOUT, best_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *best_y
     * }
     */
    public static void best_y(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(best_y$LAYOUT, best_y$OFFSET, fieldValue);
    }

    private static final AddressLayout best_z$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("best_z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *best_z
     * }
     */
    public static final AddressLayout best_z$layout() {
        return best_z$LAYOUT;
    }

    private static final long best_z$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *best_z
     * }
     */
    public static final long best_z$offset() {
        return best_z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *best_z
     * }
     */
    public static MemorySegment best_z(MemorySegment struct) {
        return struct.get(best_z$LAYOUT, best_z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *best_z
     * }
     */
    public static void best_z(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(best_z$LAYOUT, best_z$OFFSET, fieldValue);
    }

    private static final AddressLayout best_s$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("best_s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *best_s
     * }
     */
    public static final AddressLayout best_s$layout() {
        return best_s$LAYOUT;
    }

    private static final long best_s$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *best_s
     * }
     */
    public static final long best_s$offset() {
        return best_s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *best_s
     * }
     */
    public static MemorySegment best_s(MemorySegment struct) {
        return struct.get(best_s$LAYOUT, best_s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *best_s
     * }
     */
    public static void best_s(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(best_s$LAYOUT, best_s$OFFSET, fieldValue);
    }

    private static final OfDouble best_kap$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("best_kap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat best_kap
     * }
     */
    public static final OfDouble best_kap$layout() {
        return best_kap$LAYOUT;
    }

    private static final long best_kap$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat best_kap
     * }
     */
    public static final long best_kap$offset() {
        return best_kap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat best_kap
     * }
     */
    public static double best_kap(MemorySegment struct) {
        return struct.get(best_kap$LAYOUT, best_kap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat best_kap
     * }
     */
    public static void best_kap(MemorySegment struct, double fieldValue) {
        struct.set(best_kap$LAYOUT, best_kap$OFFSET, fieldValue);
    }

    private static final OfDouble best_tau$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("best_tau"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat best_tau
     * }
     */
    public static final OfDouble best_tau$layout() {
        return best_tau$LAYOUT;
    }

    private static final long best_tau$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat best_tau
     * }
     */
    public static final long best_tau$offset() {
        return best_tau$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat best_tau
     * }
     */
    public static double best_tau(MemorySegment struct) {
        return struct.get(best_tau$LAYOUT, best_tau$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat best_tau
     * }
     */
    public static void best_tau(MemorySegment struct, double fieldValue) {
        struct.set(best_tau$LAYOUT, best_tau$OFFSET, fieldValue);
    }

    private static final OfDouble best_cx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("best_cx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat best_cx
     * }
     */
    public static final OfDouble best_cx$layout() {
        return best_cx$LAYOUT;
    }

    private static final long best_cx$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat best_cx
     * }
     */
    public static final long best_cx$offset() {
        return best_cx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat best_cx
     * }
     */
    public static double best_cx(MemorySegment struct) {
        return struct.get(best_cx$LAYOUT, best_cx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat best_cx
     * }
     */
    public static void best_cx(MemorySegment struct, double fieldValue) {
        struct.set(best_cx$LAYOUT, best_cx$OFFSET, fieldValue);
    }

    private static final OfDouble best_by$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("best_by"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat best_by
     * }
     */
    public static final OfDouble best_by$layout() {
        return best_by$LAYOUT;
    }

    private static final long best_by$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat best_by
     * }
     */
    public static final long best_by$offset() {
        return best_by$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat best_by
     * }
     */
    public static double best_by(MemorySegment struct) {
        return struct.get(best_by$LAYOUT, best_by$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat best_by
     * }
     */
    public static void best_by(MemorySegment struct, double fieldValue) {
        struct.set(best_by$LAYOUT, best_by$OFFSET, fieldValue);
    }

    private static final OfDouble best_hz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("best_hz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat best_hz
     * }
     */
    public static final OfDouble best_hz$layout() {
        return best_hz$LAYOUT;
    }

    private static final long best_hz$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat best_hz
     * }
     */
    public static final long best_hz$offset() {
        return best_hz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat best_hz
     * }
     */
    public static double best_hz(MemorySegment struct) {
        return struct.get(best_hz$LAYOUT, best_hz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat best_hz
     * }
     */
    public static void best_hz(MemorySegment struct, double fieldValue) {
        struct.set(best_hz$LAYOUT, best_hz$OFFSET, fieldValue);
    }

    private static final AddressLayout best_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("best_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stats *best_info
     * }
     */
    public static final AddressLayout best_info$layout() {
        return best_info$LAYOUT;
    }

    private static final long best_info$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stats *best_info
     * }
     */
    public static final long best_info$offset() {
        return best_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stats *best_info
     * }
     */
    public static MemorySegment best_info(MemorySegment struct) {
        return struct.get(best_info$LAYOUT, best_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stats *best_info
     * }
     */
    public static void best_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(best_info$LAYOUT, best_info$OFFSET, fieldValue);
    }

    private static final AddressLayout dsaff$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dsaff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *dsaff
     * }
     */
    public static final AddressLayout dsaff$layout() {
        return dsaff$LAYOUT;
    }

    private static final long dsaff$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *dsaff
     * }
     */
    public static final long dsaff$offset() {
        return dsaff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *dsaff
     * }
     */
    public static MemorySegment dsaff(MemorySegment struct) {
        return struct.get(dsaff$LAYOUT, dsaff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *dsaff
     * }
     */
    public static void dsaff(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dsaff$LAYOUT, dsaff$OFFSET, fieldValue);
    }

    private static final AddressLayout dzaff$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dzaff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *dzaff
     * }
     */
    public static final AddressLayout dzaff$layout() {
        return dzaff$LAYOUT;
    }

    private static final long dzaff$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *dzaff
     * }
     */
    public static final long dzaff$offset() {
        return dzaff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *dzaff
     * }
     */
    public static MemorySegment dzaff(MemorySegment struct) {
        return struct.get(dzaff$LAYOUT, dzaff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *dzaff
     * }
     */
    public static void dzaff(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dzaff$LAYOUT, dzaff$OFFSET, fieldValue);
    }

    private static final AddressLayout W_times_dzaff$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("W_times_dzaff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *W_times_dzaff
     * }
     */
    public static final AddressLayout W_times_dzaff$layout() {
        return W_times_dzaff$LAYOUT;
    }

    private static final long W_times_dzaff$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *W_times_dzaff
     * }
     */
    public static final long W_times_dzaff$offset() {
        return W_times_dzaff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *W_times_dzaff
     * }
     */
    public static MemorySegment W_times_dzaff(MemorySegment struct) {
        return struct.get(W_times_dzaff$LAYOUT, W_times_dzaff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *W_times_dzaff
     * }
     */
    public static void W_times_dzaff(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(W_times_dzaff$LAYOUT, W_times_dzaff$OFFSET, fieldValue);
    }

    private static final AddressLayout dsaff_by_W$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dsaff_by_W"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *dsaff_by_W
     * }
     */
    public static final AddressLayout dsaff_by_W$layout() {
        return dsaff_by_W$LAYOUT;
    }

    private static final long dsaff_by_W$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *dsaff_by_W
     * }
     */
    public static final long dsaff_by_W$offset() {
        return dsaff_by_W$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *dsaff_by_W
     * }
     */
    public static MemorySegment dsaff_by_W(MemorySegment struct) {
        return struct.get(dsaff_by_W$LAYOUT, dsaff_by_W$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *dsaff_by_W
     * }
     */
    public static void dsaff_by_W(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dsaff_by_W$LAYOUT, dsaff_by_W$OFFSET, fieldValue);
    }

    private static final AddressLayout saff$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("saff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *saff
     * }
     */
    public static final AddressLayout saff$layout() {
        return saff$LAYOUT;
    }

    private static final long saff$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *saff
     * }
     */
    public static final long saff$offset() {
        return saff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *saff
     * }
     */
    public static MemorySegment saff(MemorySegment struct) {
        return struct.get(saff$LAYOUT, saff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *saff
     * }
     */
    public static void saff(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(saff$LAYOUT, saff$OFFSET, fieldValue);
    }

    private static final AddressLayout zaff$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("zaff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *zaff
     * }
     */
    public static final AddressLayout zaff$layout() {
        return zaff$LAYOUT;
    }

    private static final long zaff$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *zaff
     * }
     */
    public static final long zaff$offset() {
        return zaff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *zaff
     * }
     */
    public static MemorySegment zaff(MemorySegment struct) {
        return struct.get(zaff$LAYOUT, zaff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *zaff
     * }
     */
    public static void zaff(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(zaff$LAYOUT, zaff$OFFSET, fieldValue);
    }

    private static final AddressLayout C$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("C"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cone *C
     * }
     */
    public static final AddressLayout C$layout() {
        return C$LAYOUT;
    }

    private static final long C$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cone *C
     * }
     */
    public static final long C$offset() {
        return C$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cone *C
     * }
     */
    public static MemorySegment C(MemorySegment struct) {
        return struct.get(C$LAYOUT, C$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cone *C
     * }
     */
    public static void C(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(C$LAYOUT, C$OFFSET, fieldValue);
    }

    private static final AddressLayout A$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("A"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * spmat *A
     * }
     */
    public static final AddressLayout A$layout() {
        return A$LAYOUT;
    }

    private static final long A$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * spmat *A
     * }
     */
    public static final long A$offset() {
        return A$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * spmat *A
     * }
     */
    public static MemorySegment A(MemorySegment struct) {
        return struct.get(A$LAYOUT, A$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * spmat *A
     * }
     */
    public static void A(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(A$LAYOUT, A$OFFSET, fieldValue);
    }

    private static final AddressLayout G$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("G"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * spmat *G
     * }
     */
    public static final AddressLayout G$layout() {
        return G$LAYOUT;
    }

    private static final long G$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * spmat *G
     * }
     */
    public static final long G$offset() {
        return G$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * spmat *G
     * }
     */
    public static MemorySegment G(MemorySegment struct) {
        return struct.get(G$LAYOUT, G$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * spmat *G
     * }
     */
    public static void G(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(G$LAYOUT, G$OFFSET, fieldValue);
    }

    private static final AddressLayout c$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *c
     * }
     */
    public static final AddressLayout c$layout() {
        return c$LAYOUT;
    }

    private static final long c$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *c
     * }
     */
    public static final long c$offset() {
        return c$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *c
     * }
     */
    public static MemorySegment c(MemorySegment struct) {
        return struct.get(c$LAYOUT, c$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *c
     * }
     */
    public static void c(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c$LAYOUT, c$OFFSET, fieldValue);
    }

    private static final AddressLayout b$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *b
     * }
     */
    public static final AddressLayout b$layout() {
        return b$LAYOUT;
    }

    private static final long b$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *b
     * }
     */
    public static final long b$offset() {
        return b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *b
     * }
     */
    public static MemorySegment b(MemorySegment struct) {
        return struct.get(b$LAYOUT, b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *b
     * }
     */
    public static void b(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(b$LAYOUT, b$OFFSET, fieldValue);
    }

    private static final AddressLayout h$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *h
     * }
     */
    public static final AddressLayout h$layout() {
        return h$LAYOUT;
    }

    private static final long h$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *h
     * }
     */
    public static final long h$offset() {
        return h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *h
     * }
     */
    public static MemorySegment h(MemorySegment struct) {
        return struct.get(h$LAYOUT, h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *h
     * }
     */
    public static void h(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(h$LAYOUT, h$OFFSET, fieldValue);
    }

    private static final AddressLayout AtoK$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AtoK"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint *AtoK
     * }
     */
    public static final AddressLayout AtoK$layout() {
        return AtoK$LAYOUT;
    }

    private static final long AtoK$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint *AtoK
     * }
     */
    public static final long AtoK$offset() {
        return AtoK$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint *AtoK
     * }
     */
    public static MemorySegment AtoK(MemorySegment struct) {
        return struct.get(AtoK$LAYOUT, AtoK$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint *AtoK
     * }
     */
    public static void AtoK(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AtoK$LAYOUT, AtoK$OFFSET, fieldValue);
    }

    private static final AddressLayout GtoK$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GtoK"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * idxint *GtoK
     * }
     */
    public static final AddressLayout GtoK$layout() {
        return GtoK$LAYOUT;
    }

    private static final long GtoK$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * idxint *GtoK
     * }
     */
    public static final long GtoK$offset() {
        return GtoK$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * idxint *GtoK
     * }
     */
    public static MemorySegment GtoK(MemorySegment struct) {
        return struct.get(GtoK$LAYOUT, GtoK$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * idxint *GtoK
     * }
     */
    public static void GtoK(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GtoK$LAYOUT, GtoK$OFFSET, fieldValue);
    }

    private static final AddressLayout xequil$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xequil"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *xequil
     * }
     */
    public static final AddressLayout xequil$layout() {
        return xequil$LAYOUT;
    }

    private static final long xequil$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *xequil
     * }
     */
    public static final long xequil$offset() {
        return xequil$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *xequil
     * }
     */
    public static MemorySegment xequil(MemorySegment struct) {
        return struct.get(xequil$LAYOUT, xequil$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *xequil
     * }
     */
    public static void xequil(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xequil$LAYOUT, xequil$OFFSET, fieldValue);
    }

    private static final AddressLayout Aequil$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Aequil"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *Aequil
     * }
     */
    public static final AddressLayout Aequil$layout() {
        return Aequil$LAYOUT;
    }

    private static final long Aequil$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *Aequil
     * }
     */
    public static final long Aequil$offset() {
        return Aequil$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *Aequil
     * }
     */
    public static MemorySegment Aequil(MemorySegment struct) {
        return struct.get(Aequil$LAYOUT, Aequil$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *Aequil
     * }
     */
    public static void Aequil(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Aequil$LAYOUT, Aequil$OFFSET, fieldValue);
    }

    private static final AddressLayout Gequil$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Gequil"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *Gequil
     * }
     */
    public static final AddressLayout Gequil$layout() {
        return Gequil$LAYOUT;
    }

    private static final long Gequil$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *Gequil
     * }
     */
    public static final long Gequil$offset() {
        return Gequil$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *Gequil
     * }
     */
    public static MemorySegment Gequil(MemorySegment struct) {
        return struct.get(Gequil$LAYOUT, Gequil$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *Gequil
     * }
     */
    public static void Gequil(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Gequil$LAYOUT, Gequil$OFFSET, fieldValue);
    }

    private static final OfDouble resx0$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("resx0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat resx0
     * }
     */
    public static final OfDouble resx0$layout() {
        return resx0$LAYOUT;
    }

    private static final long resx0$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat resx0
     * }
     */
    public static final long resx0$offset() {
        return resx0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat resx0
     * }
     */
    public static double resx0(MemorySegment struct) {
        return struct.get(resx0$LAYOUT, resx0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat resx0
     * }
     */
    public static void resx0(MemorySegment struct, double fieldValue) {
        struct.set(resx0$LAYOUT, resx0$OFFSET, fieldValue);
    }

    private static final OfDouble resy0$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("resy0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat resy0
     * }
     */
    public static final OfDouble resy0$layout() {
        return resy0$LAYOUT;
    }

    private static final long resy0$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat resy0
     * }
     */
    public static final long resy0$offset() {
        return resy0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat resy0
     * }
     */
    public static double resy0(MemorySegment struct) {
        return struct.get(resy0$LAYOUT, resy0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat resy0
     * }
     */
    public static void resy0(MemorySegment struct, double fieldValue) {
        struct.set(resy0$LAYOUT, resy0$OFFSET, fieldValue);
    }

    private static final OfDouble resz0$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("resz0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat resz0
     * }
     */
    public static final OfDouble resz0$layout() {
        return resz0$LAYOUT;
    }

    private static final long resz0$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat resz0
     * }
     */
    public static final long resz0$offset() {
        return resz0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat resz0
     * }
     */
    public static double resz0(MemorySegment struct) {
        return struct.get(resz0$LAYOUT, resz0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat resz0
     * }
     */
    public static void resz0(MemorySegment struct, double fieldValue) {
        struct.set(resz0$LAYOUT, resz0$OFFSET, fieldValue);
    }

    private static final AddressLayout rx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *rx
     * }
     */
    public static final AddressLayout rx$layout() {
        return rx$LAYOUT;
    }

    private static final long rx$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *rx
     * }
     */
    public static final long rx$offset() {
        return rx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *rx
     * }
     */
    public static MemorySegment rx(MemorySegment struct) {
        return struct.get(rx$LAYOUT, rx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *rx
     * }
     */
    public static void rx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rx$LAYOUT, rx$OFFSET, fieldValue);
    }

    private static final AddressLayout ry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *ry
     * }
     */
    public static final AddressLayout ry$layout() {
        return ry$LAYOUT;
    }

    private static final long ry$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *ry
     * }
     */
    public static final long ry$offset() {
        return ry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *ry
     * }
     */
    public static MemorySegment ry(MemorySegment struct) {
        return struct.get(ry$LAYOUT, ry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *ry
     * }
     */
    public static void ry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ry$LAYOUT, ry$OFFSET, fieldValue);
    }

    private static final AddressLayout rz$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat *rz
     * }
     */
    public static final AddressLayout rz$layout() {
        return rz$LAYOUT;
    }

    private static final long rz$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat *rz
     * }
     */
    public static final long rz$offset() {
        return rz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat *rz
     * }
     */
    public static MemorySegment rz(MemorySegment struct) {
        return struct.get(rz$LAYOUT, rz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat *rz
     * }
     */
    public static void rz(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rz$LAYOUT, rz$OFFSET, fieldValue);
    }

    private static final OfDouble rt$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("rt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat rt
     * }
     */
    public static final OfDouble rt$layout() {
        return rt$LAYOUT;
    }

    private static final long rt$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat rt
     * }
     */
    public static final long rt$offset() {
        return rt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat rt
     * }
     */
    public static double rt(MemorySegment struct) {
        return struct.get(rt$LAYOUT, rt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat rt
     * }
     */
    public static void rt(MemorySegment struct, double fieldValue) {
        struct.set(rt$LAYOUT, rt$OFFSET, fieldValue);
    }

    private static final OfDouble hresx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("hresx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat hresx
     * }
     */
    public static final OfDouble hresx$layout() {
        return hresx$LAYOUT;
    }

    private static final long hresx$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat hresx
     * }
     */
    public static final long hresx$offset() {
        return hresx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat hresx
     * }
     */
    public static double hresx(MemorySegment struct) {
        return struct.get(hresx$LAYOUT, hresx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat hresx
     * }
     */
    public static void hresx(MemorySegment struct, double fieldValue) {
        struct.set(hresx$LAYOUT, hresx$OFFSET, fieldValue);
    }

    private static final OfDouble hresy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("hresy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat hresy
     * }
     */
    public static final OfDouble hresy$layout() {
        return hresy$LAYOUT;
    }

    private static final long hresy$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat hresy
     * }
     */
    public static final long hresy$offset() {
        return hresy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat hresy
     * }
     */
    public static double hresy(MemorySegment struct) {
        return struct.get(hresy$LAYOUT, hresy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat hresy
     * }
     */
    public static void hresy(MemorySegment struct, double fieldValue) {
        struct.set(hresy$LAYOUT, hresy$OFFSET, fieldValue);
    }

    private static final OfDouble hresz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("hresz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat hresz
     * }
     */
    public static final OfDouble hresz$layout() {
        return hresz$LAYOUT;
    }

    private static final long hresz$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat hresz
     * }
     */
    public static final long hresz$offset() {
        return hresz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat hresz
     * }
     */
    public static double hresz(MemorySegment struct) {
        return struct.get(hresz$LAYOUT, hresz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat hresz
     * }
     */
    public static void hresz(MemorySegment struct, double fieldValue) {
        struct.set(hresz$LAYOUT, hresz$OFFSET, fieldValue);
    }

    private static final OfDouble nx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("nx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat nx
     * }
     */
    public static final OfDouble nx$layout() {
        return nx$LAYOUT;
    }

    private static final long nx$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat nx
     * }
     */
    public static final long nx$offset() {
        return nx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat nx
     * }
     */
    public static double nx(MemorySegment struct) {
        return struct.get(nx$LAYOUT, nx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat nx
     * }
     */
    public static void nx(MemorySegment struct, double fieldValue) {
        struct.set(nx$LAYOUT, nx$OFFSET, fieldValue);
    }

    private static final OfDouble ny$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("ny"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat ny
     * }
     */
    public static final OfDouble ny$layout() {
        return ny$LAYOUT;
    }

    private static final long ny$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat ny
     * }
     */
    public static final long ny$offset() {
        return ny$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat ny
     * }
     */
    public static double ny(MemorySegment struct) {
        return struct.get(ny$LAYOUT, ny$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat ny
     * }
     */
    public static void ny(MemorySegment struct, double fieldValue) {
        struct.set(ny$LAYOUT, ny$OFFSET, fieldValue);
    }

    private static final OfDouble nz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("nz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat nz
     * }
     */
    public static final OfDouble nz$layout() {
        return nz$LAYOUT;
    }

    private static final long nz$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat nz
     * }
     */
    public static final long nz$offset() {
        return nz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat nz
     * }
     */
    public static double nz(MemorySegment struct) {
        return struct.get(nz$LAYOUT, nz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat nz
     * }
     */
    public static void nz(MemorySegment struct, double fieldValue) {
        struct.set(nz$LAYOUT, nz$OFFSET, fieldValue);
    }

    private static final OfDouble ns$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("ns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat ns
     * }
     */
    public static final OfDouble ns$layout() {
        return ns$LAYOUT;
    }

    private static final long ns$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat ns
     * }
     */
    public static final long ns$offset() {
        return ns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat ns
     * }
     */
    public static double ns(MemorySegment struct) {
        return struct.get(ns$LAYOUT, ns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat ns
     * }
     */
    public static void ns(MemorySegment struct, double fieldValue) {
        struct.set(ns$LAYOUT, ns$OFFSET, fieldValue);
    }

    private static final OfDouble cx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("cx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat cx
     * }
     */
    public static final OfDouble cx$layout() {
        return cx$LAYOUT;
    }

    private static final long cx$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat cx
     * }
     */
    public static final long cx$offset() {
        return cx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat cx
     * }
     */
    public static double cx(MemorySegment struct) {
        return struct.get(cx$LAYOUT, cx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat cx
     * }
     */
    public static void cx(MemorySegment struct, double fieldValue) {
        struct.set(cx$LAYOUT, cx$OFFSET, fieldValue);
    }

    private static final OfDouble by$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("by"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat by
     * }
     */
    public static final OfDouble by$layout() {
        return by$LAYOUT;
    }

    private static final long by$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat by
     * }
     */
    public static final long by$offset() {
        return by$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat by
     * }
     */
    public static double by(MemorySegment struct) {
        return struct.get(by$LAYOUT, by$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat by
     * }
     */
    public static void by(MemorySegment struct, double fieldValue) {
        struct.set(by$LAYOUT, by$OFFSET, fieldValue);
    }

    private static final OfDouble hz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("hz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat hz
     * }
     */
    public static final OfDouble hz$layout() {
        return hz$LAYOUT;
    }

    private static final long hz$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat hz
     * }
     */
    public static final long hz$offset() {
        return hz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat hz
     * }
     */
    public static double hz(MemorySegment struct) {
        return struct.get(hz$LAYOUT, hz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat hz
     * }
     */
    public static void hz(MemorySegment struct, double fieldValue) {
        struct.set(hz$LAYOUT, hz$OFFSET, fieldValue);
    }

    private static final OfDouble sz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pfloat sz
     * }
     */
    public static final OfDouble sz$layout() {
        return sz$LAYOUT;
    }

    private static final long sz$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pfloat sz
     * }
     */
    public static final long sz$offset() {
        return sz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pfloat sz
     * }
     */
    public static double sz(MemorySegment struct) {
        return struct.get(sz$LAYOUT, sz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pfloat sz
     * }
     */
    public static void sz(MemorySegment struct, double fieldValue) {
        struct.set(sz$LAYOUT, sz$OFFSET, fieldValue);
    }

    private static final AddressLayout KKT$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("KKT"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * kkt *KKT
     * }
     */
    public static final AddressLayout KKT$layout() {
        return KKT$LAYOUT;
    }

    private static final long KKT$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * kkt *KKT
     * }
     */
    public static final long KKT$offset() {
        return KKT$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * kkt *KKT
     * }
     */
    public static MemorySegment KKT(MemorySegment struct) {
        return struct.get(KKT$LAYOUT, KKT$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * kkt *KKT
     * }
     */
    public static void KKT(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(KKT$LAYOUT, KKT$OFFSET, fieldValue);
    }

    private static final AddressLayout info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * stats *info
     * }
     */
    public static final AddressLayout info$layout() {
        return info$LAYOUT;
    }

    private static final long info$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * stats *info
     * }
     */
    public static final long info$offset() {
        return info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * stats *info
     * }
     */
    public static MemorySegment info(MemorySegment struct) {
        return struct.get(info$LAYOUT, info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * stats *info
     * }
     */
    public static void info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(info$LAYOUT, info$OFFSET, fieldValue);
    }

    private static final AddressLayout stgs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stgs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * settings *stgs
     * }
     */
    public static final AddressLayout stgs$layout() {
        return stgs$LAYOUT;
    }

    private static final long stgs$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * settings *stgs
     * }
     */
    public static final long stgs$offset() {
        return stgs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * settings *stgs
     * }
     */
    public static MemorySegment stgs(MemorySegment struct) {
        return struct.get(stgs$LAYOUT, stgs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * settings *stgs
     * }
     */
    public static void stgs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stgs$LAYOUT, stgs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

