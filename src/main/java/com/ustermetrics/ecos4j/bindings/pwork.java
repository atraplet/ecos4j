// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct pwork {
 *     idxint n;
 *     idxint m;
 *     idxint p;
 *     idxint D;
 *     pfloat* x;
 *     pfloat* y;
 *     pfloat* z;
 *     pfloat* s;
 *     pfloat* lambda;
 *     pfloat kap;
 *     pfloat tau;
 *     pfloat* best_x;
 *     pfloat* best_y;
 *     pfloat* best_z;
 *     pfloat* best_s;
 *     pfloat best_kap;
 *     pfloat best_tau;
 *     pfloat best_cx;
 *     pfloat best_by;
 *     pfloat best_hz;
 *     stats* best_info;
 *     pfloat* dsaff;
 *     pfloat* dzaff;
 *     pfloat* W_times_dzaff;
 *     pfloat* dsaff_by_W;
 *     pfloat* saff;
 *     pfloat* zaff;
 *     cone* C;
 *     spmat* A;
 *     spmat* G;
 *     pfloat* c;
 *     pfloat* b;
 *     pfloat* h;
 *     idxint* AtoK;
 *     idxint* GtoK;
 *     pfloat* xequil;
 *     pfloat* Aequil;
 *     pfloat* Gequil;
 *     pfloat resx0;
 *     pfloat resy0;
 *     pfloat resz0;
 *     pfloat* rx;
 *     pfloat* ry;
 *     pfloat* rz;
 *     pfloat rt;
 *     pfloat hresx;
 *     pfloat hresy;
 *     pfloat hresz;
 *     pfloat nx;
 *     pfloat ny;
 *     pfloat nz;
 *     pfloat ns;
 *     pfloat cx;
 *     pfloat by;
 *     pfloat hz;
 *     pfloat sz;
 *     kkt* KKT;
 *     stats* info;
 *     settings* stgs;
 * };
 * }
 */
public class pwork {

    public static MemoryLayout $LAYOUT() {
        return constants$31.const$0;
    }
    public static VarHandle n$VH() {
        return constants$31.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint n;
     * }
     */
    public static long n$get(MemorySegment seg) {
        return (long)constants$31.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint n;
     * }
     */
    public static void n$set(MemorySegment seg, long x) {
        constants$31.const$1.set(seg, x);
    }
    public static long n$get(MemorySegment seg, long index) {
        return (long)constants$31.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void n$set(MemorySegment seg, long index, long x) {
        constants$31.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle m$VH() {
        return constants$31.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint m;
     * }
     */
    public static long m$get(MemorySegment seg) {
        return (long)constants$31.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint m;
     * }
     */
    public static void m$set(MemorySegment seg, long x) {
        constants$31.const$2.set(seg, x);
    }
    public static long m$get(MemorySegment seg, long index) {
        return (long)constants$31.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void m$set(MemorySegment seg, long index, long x) {
        constants$31.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle p$VH() {
        return constants$31.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint p;
     * }
     */
    public static long p$get(MemorySegment seg) {
        return (long)constants$31.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint p;
     * }
     */
    public static void p$set(MemorySegment seg, long x) {
        constants$31.const$3.set(seg, x);
    }
    public static long p$get(MemorySegment seg, long index) {
        return (long)constants$31.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, long x) {
        constants$31.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle D$VH() {
        return constants$31.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint D;
     * }
     */
    public static long D$get(MemorySegment seg) {
        return (long)constants$31.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint D;
     * }
     */
    public static void D$set(MemorySegment seg, long x) {
        constants$31.const$4.set(seg, x);
    }
    public static long D$get(MemorySegment seg, long index) {
        return (long)constants$31.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void D$set(MemorySegment seg, long index, long x) {
        constants$31.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle x$VH() {
        return constants$31.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* x;
     * }
     */
    public static MemorySegment x$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* x;
     * }
     */
    public static void x$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$5.set(seg, x);
    }
    public static MemorySegment x$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$32.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* y;
     * }
     */
    public static MemorySegment y$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* y;
     * }
     */
    public static void y$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$0.set(seg, x);
    }
    public static MemorySegment y$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle z$VH() {
        return constants$32.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* z;
     * }
     */
    public static MemorySegment z$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* z;
     * }
     */
    public static void z$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$1.set(seg, x);
    }
    public static MemorySegment z$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle s$VH() {
        return constants$32.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* s;
     * }
     */
    public static MemorySegment s$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* s;
     * }
     */
    public static void s$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$2.set(seg, x);
    }
    public static MemorySegment s$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void s$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lambda$VH() {
        return constants$32.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* lambda;
     * }
     */
    public static MemorySegment lambda$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* lambda;
     * }
     */
    public static void lambda$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$3.set(seg, x);
    }
    public static MemorySegment lambda$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void lambda$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle kap$VH() {
        return constants$32.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat kap;
     * }
     */
    public static double kap$get(MemorySegment seg) {
        return (double)constants$32.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat kap;
     * }
     */
    public static void kap$set(MemorySegment seg, double x) {
        constants$32.const$4.set(seg, x);
    }
    public static double kap$get(MemorySegment seg, long index) {
        return (double)constants$32.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void kap$set(MemorySegment seg, long index, double x) {
        constants$32.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tau$VH() {
        return constants$32.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat tau;
     * }
     */
    public static double tau$get(MemorySegment seg) {
        return (double)constants$32.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat tau;
     * }
     */
    public static void tau$set(MemorySegment seg, double x) {
        constants$32.const$5.set(seg, x);
    }
    public static double tau$get(MemorySegment seg, long index) {
        return (double)constants$32.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tau$set(MemorySegment seg, long index, double x) {
        constants$32.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_x$VH() {
        return constants$33.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* best_x;
     * }
     */
    public static MemorySegment best_x$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* best_x;
     * }
     */
    public static void best_x$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$0.set(seg, x);
    }
    public static MemorySegment best_x$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void best_x$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_y$VH() {
        return constants$33.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* best_y;
     * }
     */
    public static MemorySegment best_y$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* best_y;
     * }
     */
    public static void best_y$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$1.set(seg, x);
    }
    public static MemorySegment best_y$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void best_y$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_z$VH() {
        return constants$33.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* best_z;
     * }
     */
    public static MemorySegment best_z$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* best_z;
     * }
     */
    public static void best_z$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$2.set(seg, x);
    }
    public static MemorySegment best_z$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void best_z$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_s$VH() {
        return constants$33.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* best_s;
     * }
     */
    public static MemorySegment best_s$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* best_s;
     * }
     */
    public static void best_s$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$3.set(seg, x);
    }
    public static MemorySegment best_s$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void best_s$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_kap$VH() {
        return constants$33.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat best_kap;
     * }
     */
    public static double best_kap$get(MemorySegment seg) {
        return (double)constants$33.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat best_kap;
     * }
     */
    public static void best_kap$set(MemorySegment seg, double x) {
        constants$33.const$4.set(seg, x);
    }
    public static double best_kap$get(MemorySegment seg, long index) {
        return (double)constants$33.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void best_kap$set(MemorySegment seg, long index, double x) {
        constants$33.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_tau$VH() {
        return constants$33.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat best_tau;
     * }
     */
    public static double best_tau$get(MemorySegment seg) {
        return (double)constants$33.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat best_tau;
     * }
     */
    public static void best_tau$set(MemorySegment seg, double x) {
        constants$33.const$5.set(seg, x);
    }
    public static double best_tau$get(MemorySegment seg, long index) {
        return (double)constants$33.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void best_tau$set(MemorySegment seg, long index, double x) {
        constants$33.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_cx$VH() {
        return constants$34.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat best_cx;
     * }
     */
    public static double best_cx$get(MemorySegment seg) {
        return (double)constants$34.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat best_cx;
     * }
     */
    public static void best_cx$set(MemorySegment seg, double x) {
        constants$34.const$0.set(seg, x);
    }
    public static double best_cx$get(MemorySegment seg, long index) {
        return (double)constants$34.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void best_cx$set(MemorySegment seg, long index, double x) {
        constants$34.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_by$VH() {
        return constants$34.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat best_by;
     * }
     */
    public static double best_by$get(MemorySegment seg) {
        return (double)constants$34.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat best_by;
     * }
     */
    public static void best_by$set(MemorySegment seg, double x) {
        constants$34.const$1.set(seg, x);
    }
    public static double best_by$get(MemorySegment seg, long index) {
        return (double)constants$34.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void best_by$set(MemorySegment seg, long index, double x) {
        constants$34.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_hz$VH() {
        return constants$34.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat best_hz;
     * }
     */
    public static double best_hz$get(MemorySegment seg) {
        return (double)constants$34.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat best_hz;
     * }
     */
    public static void best_hz$set(MemorySegment seg, double x) {
        constants$34.const$2.set(seg, x);
    }
    public static double best_hz$get(MemorySegment seg, long index) {
        return (double)constants$34.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void best_hz$set(MemorySegment seg, long index, double x) {
        constants$34.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_info$VH() {
        return constants$34.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * stats* best_info;
     * }
     */
    public static MemorySegment best_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * stats* best_info;
     * }
     */
    public static void best_info$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$3.set(seg, x);
    }
    public static MemorySegment best_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void best_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dsaff$VH() {
        return constants$34.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dsaff;
     * }
     */
    public static MemorySegment dsaff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dsaff;
     * }
     */
    public static void dsaff$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$4.set(seg, x);
    }
    public static MemorySegment dsaff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dsaff$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dzaff$VH() {
        return constants$34.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dzaff;
     * }
     */
    public static MemorySegment dzaff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dzaff;
     * }
     */
    public static void dzaff$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$5.set(seg, x);
    }
    public static MemorySegment dzaff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dzaff$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle W_times_dzaff$VH() {
        return constants$35.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* W_times_dzaff;
     * }
     */
    public static MemorySegment W_times_dzaff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* W_times_dzaff;
     * }
     */
    public static void W_times_dzaff$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$0.set(seg, x);
    }
    public static MemorySegment W_times_dzaff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void W_times_dzaff$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dsaff_by_W$VH() {
        return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* dsaff_by_W;
     * }
     */
    public static MemorySegment dsaff_by_W$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* dsaff_by_W;
     * }
     */
    public static void dsaff_by_W$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$1.set(seg, x);
    }
    public static MemorySegment dsaff_by_W$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dsaff_by_W$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle saff$VH() {
        return constants$35.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* saff;
     * }
     */
    public static MemorySegment saff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* saff;
     * }
     */
    public static void saff$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$2.set(seg, x);
    }
    public static MemorySegment saff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void saff$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle zaff$VH() {
        return constants$35.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* zaff;
     * }
     */
    public static MemorySegment zaff$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* zaff;
     * }
     */
    public static void zaff$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$3.set(seg, x);
    }
    public static MemorySegment zaff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void zaff$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle C$VH() {
        return constants$35.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * cone* C;
     * }
     */
    public static MemorySegment C$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * cone* C;
     * }
     */
    public static void C$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$4.set(seg, x);
    }
    public static MemorySegment C$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void C$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle A$VH() {
        return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * spmat* A;
     * }
     */
    public static MemorySegment A$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * spmat* A;
     * }
     */
    public static void A$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$5.set(seg, x);
    }
    public static MemorySegment A$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void A$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle G$VH() {
        return constants$36.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * spmat* G;
     * }
     */
    public static MemorySegment G$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * spmat* G;
     * }
     */
    public static void G$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$0.set(seg, x);
    }
    public static MemorySegment G$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void G$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle c$VH() {
        return constants$36.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* c;
     * }
     */
    public static MemorySegment c$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* c;
     * }
     */
    public static void c$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$1.set(seg, x);
    }
    public static MemorySegment c$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void c$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b$VH() {
        return constants$36.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* b;
     * }
     */
    public static MemorySegment b$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* b;
     * }
     */
    public static void b$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$2.set(seg, x);
    }
    public static MemorySegment b$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle h$VH() {
        return constants$36.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* h;
     * }
     */
    public static MemorySegment h$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* h;
     * }
     */
    public static void h$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$3.set(seg, x);
    }
    public static MemorySegment h$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void h$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AtoK$VH() {
        return constants$36.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* AtoK;
     * }
     */
    public static MemorySegment AtoK$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* AtoK;
     * }
     */
    public static void AtoK$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$4.set(seg, x);
    }
    public static MemorySegment AtoK$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AtoK$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle GtoK$VH() {
        return constants$36.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * idxint* GtoK;
     * }
     */
    public static MemorySegment GtoK$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * idxint* GtoK;
     * }
     */
    public static void GtoK$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$5.set(seg, x);
    }
    public static MemorySegment GtoK$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GtoK$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle xequil$VH() {
        return constants$37.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* xequil;
     * }
     */
    public static MemorySegment xequil$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* xequil;
     * }
     */
    public static void xequil$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$0.set(seg, x);
    }
    public static MemorySegment xequil$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void xequil$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Aequil$VH() {
        return constants$37.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* Aequil;
     * }
     */
    public static MemorySegment Aequil$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* Aequil;
     * }
     */
    public static void Aequil$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$1.set(seg, x);
    }
    public static MemorySegment Aequil$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Aequil$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Gequil$VH() {
        return constants$37.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* Gequil;
     * }
     */
    public static MemorySegment Gequil$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* Gequil;
     * }
     */
    public static void Gequil$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$2.set(seg, x);
    }
    public static MemorySegment Gequil$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Gequil$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle resx0$VH() {
        return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat resx0;
     * }
     */
    public static double resx0$get(MemorySegment seg) {
        return (double)constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat resx0;
     * }
     */
    public static void resx0$set(MemorySegment seg, double x) {
        constants$37.const$3.set(seg, x);
    }
    public static double resx0$get(MemorySegment seg, long index) {
        return (double)constants$37.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void resx0$set(MemorySegment seg, long index, double x) {
        constants$37.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle resy0$VH() {
        return constants$37.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat resy0;
     * }
     */
    public static double resy0$get(MemorySegment seg) {
        return (double)constants$37.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat resy0;
     * }
     */
    public static void resy0$set(MemorySegment seg, double x) {
        constants$37.const$4.set(seg, x);
    }
    public static double resy0$get(MemorySegment seg, long index) {
        return (double)constants$37.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void resy0$set(MemorySegment seg, long index, double x) {
        constants$37.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle resz0$VH() {
        return constants$37.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat resz0;
     * }
     */
    public static double resz0$get(MemorySegment seg) {
        return (double)constants$37.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat resz0;
     * }
     */
    public static void resz0$set(MemorySegment seg, double x) {
        constants$37.const$5.set(seg, x);
    }
    public static double resz0$get(MemorySegment seg, long index) {
        return (double)constants$37.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void resz0$set(MemorySegment seg, long index, double x) {
        constants$37.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rx$VH() {
        return constants$38.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* rx;
     * }
     */
    public static MemorySegment rx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* rx;
     * }
     */
    public static void rx$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$0.set(seg, x);
    }
    public static MemorySegment rx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ry$VH() {
        return constants$38.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* ry;
     * }
     */
    public static MemorySegment ry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* ry;
     * }
     */
    public static void ry$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$1.set(seg, x);
    }
    public static MemorySegment ry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ry$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rz$VH() {
        return constants$38.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat* rz;
     * }
     */
    public static MemorySegment rz$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat* rz;
     * }
     */
    public static void rz$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$2.set(seg, x);
    }
    public static MemorySegment rz$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rz$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rt$VH() {
        return constants$38.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat rt;
     * }
     */
    public static double rt$get(MemorySegment seg) {
        return (double)constants$38.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat rt;
     * }
     */
    public static void rt$set(MemorySegment seg, double x) {
        constants$38.const$3.set(seg, x);
    }
    public static double rt$get(MemorySegment seg, long index) {
        return (double)constants$38.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void rt$set(MemorySegment seg, long index, double x) {
        constants$38.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hresx$VH() {
        return constants$38.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat hresx;
     * }
     */
    public static double hresx$get(MemorySegment seg) {
        return (double)constants$38.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat hresx;
     * }
     */
    public static void hresx$set(MemorySegment seg, double x) {
        constants$38.const$4.set(seg, x);
    }
    public static double hresx$get(MemorySegment seg, long index) {
        return (double)constants$38.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hresx$set(MemorySegment seg, long index, double x) {
        constants$38.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hresy$VH() {
        return constants$38.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat hresy;
     * }
     */
    public static double hresy$get(MemorySegment seg) {
        return (double)constants$38.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat hresy;
     * }
     */
    public static void hresy$set(MemorySegment seg, double x) {
        constants$38.const$5.set(seg, x);
    }
    public static double hresy$get(MemorySegment seg, long index) {
        return (double)constants$38.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hresy$set(MemorySegment seg, long index, double x) {
        constants$38.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hresz$VH() {
        return constants$39.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat hresz;
     * }
     */
    public static double hresz$get(MemorySegment seg) {
        return (double)constants$39.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat hresz;
     * }
     */
    public static void hresz$set(MemorySegment seg, double x) {
        constants$39.const$0.set(seg, x);
    }
    public static double hresz$get(MemorySegment seg, long index) {
        return (double)constants$39.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hresz$set(MemorySegment seg, long index, double x) {
        constants$39.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nx$VH() {
        return constants$39.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat nx;
     * }
     */
    public static double nx$get(MemorySegment seg) {
        return (double)constants$39.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat nx;
     * }
     */
    public static void nx$set(MemorySegment seg, double x) {
        constants$39.const$1.set(seg, x);
    }
    public static double nx$get(MemorySegment seg, long index) {
        return (double)constants$39.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nx$set(MemorySegment seg, long index, double x) {
        constants$39.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ny$VH() {
        return constants$39.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat ny;
     * }
     */
    public static double ny$get(MemorySegment seg) {
        return (double)constants$39.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat ny;
     * }
     */
    public static void ny$set(MemorySegment seg, double x) {
        constants$39.const$2.set(seg, x);
    }
    public static double ny$get(MemorySegment seg, long index) {
        return (double)constants$39.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ny$set(MemorySegment seg, long index, double x) {
        constants$39.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nz$VH() {
        return constants$39.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat nz;
     * }
     */
    public static double nz$get(MemorySegment seg) {
        return (double)constants$39.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat nz;
     * }
     */
    public static void nz$set(MemorySegment seg, double x) {
        constants$39.const$3.set(seg, x);
    }
    public static double nz$get(MemorySegment seg, long index) {
        return (double)constants$39.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nz$set(MemorySegment seg, long index, double x) {
        constants$39.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ns$VH() {
        return constants$39.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat ns;
     * }
     */
    public static double ns$get(MemorySegment seg) {
        return (double)constants$39.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat ns;
     * }
     */
    public static void ns$set(MemorySegment seg, double x) {
        constants$39.const$4.set(seg, x);
    }
    public static double ns$get(MemorySegment seg, long index) {
        return (double)constants$39.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ns$set(MemorySegment seg, long index, double x) {
        constants$39.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cx$VH() {
        return constants$39.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat cx;
     * }
     */
    public static double cx$get(MemorySegment seg) {
        return (double)constants$39.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat cx;
     * }
     */
    public static void cx$set(MemorySegment seg, double x) {
        constants$39.const$5.set(seg, x);
    }
    public static double cx$get(MemorySegment seg, long index) {
        return (double)constants$39.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cx$set(MemorySegment seg, long index, double x) {
        constants$39.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle by$VH() {
        return constants$40.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat by;
     * }
     */
    public static double by$get(MemorySegment seg) {
        return (double)constants$40.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat by;
     * }
     */
    public static void by$set(MemorySegment seg, double x) {
        constants$40.const$0.set(seg, x);
    }
    public static double by$get(MemorySegment seg, long index) {
        return (double)constants$40.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void by$set(MemorySegment seg, long index, double x) {
        constants$40.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hz$VH() {
        return constants$40.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat hz;
     * }
     */
    public static double hz$get(MemorySegment seg) {
        return (double)constants$40.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat hz;
     * }
     */
    public static void hz$set(MemorySegment seg, double x) {
        constants$40.const$1.set(seg, x);
    }
    public static double hz$get(MemorySegment seg, long index) {
        return (double)constants$40.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hz$set(MemorySegment seg, long index, double x) {
        constants$40.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sz$VH() {
        return constants$40.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * pfloat sz;
     * }
     */
    public static double sz$get(MemorySegment seg) {
        return (double)constants$40.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * pfloat sz;
     * }
     */
    public static void sz$set(MemorySegment seg, double x) {
        constants$40.const$2.set(seg, x);
    }
    public static double sz$get(MemorySegment seg, long index) {
        return (double)constants$40.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sz$set(MemorySegment seg, long index, double x) {
        constants$40.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle KKT$VH() {
        return constants$40.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * kkt* KKT;
     * }
     */
    public static MemorySegment KKT$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * kkt* KKT;
     * }
     */
    public static void KKT$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$3.set(seg, x);
    }
    public static MemorySegment KKT$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void KKT$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle info$VH() {
        return constants$40.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * stats* info;
     * }
     */
    public static MemorySegment info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * stats* info;
     * }
     */
    public static void info$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$4.set(seg, x);
    }
    public static MemorySegment info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stgs$VH() {
        return constants$40.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * settings* stgs;
     * }
     */
    public static MemorySegment stgs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * settings* stgs;
     * }
     */
    public static void stgs$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$5.set(seg, x);
    }
    public static MemorySegment stgs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void stgs$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


