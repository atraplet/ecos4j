// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SuiteSparse_config_struct {
 *     void* (*malloc_memory)(size_t);
 *     void* (*realloc_memory)(void*,size_t);
 *     void (*free_memory)(void*);
 *     void* (*calloc_memory)(size_t,size_t);
 * };
 * }
 */
public class SuiteSparse_config_struct {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    /**
     * {@snippet :
 * void* (*malloc_memory)(size_t);
     * }
     */
    public interface malloc_memory {

        java.lang.foreign.MemorySegment apply(long _x0);
        static MemorySegment allocate(malloc_memory fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$0.const$5, fi, constants$0.const$4, scope);
        }
        static malloc_memory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle malloc_memory$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*malloc_memory)(size_t);
     * }
     */
    public static MemorySegment malloc_memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*malloc_memory)(size_t);
     * }
     */
    public static void malloc_memory$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$1.set(seg, x);
    }
    public static MemorySegment malloc_memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void malloc_memory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static malloc_memory malloc_memory(MemorySegment segment, Arena scope) {
        return malloc_memory.ofAddress(malloc_memory$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*realloc_memory)(void*,size_t);
     * }
     */
    public interface realloc_memory {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(realloc_memory fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1.const$3, fi, constants$1.const$2, scope);
        }
        static realloc_memory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle realloc_memory$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*realloc_memory)(void*,size_t);
     * }
     */
    public static MemorySegment realloc_memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*realloc_memory)(void*,size_t);
     * }
     */
    public static void realloc_memory$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$5.set(seg, x);
    }
    public static MemorySegment realloc_memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void realloc_memory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static realloc_memory realloc_memory(MemorySegment segment, Arena scope) {
        return realloc_memory.ofAddress(realloc_memory$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*free_memory)(void*);
     * }
     */
    public interface free_memory {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free_memory fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2.const$1, fi, constants$2.const$0, scope);
        }
        static free_memory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$2.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free_memory$VH() {
        return constants$2.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*free_memory)(void*);
     * }
     */
    public static MemorySegment free_memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*free_memory)(void*);
     * }
     */
    public static void free_memory$set(MemorySegment seg, MemorySegment x) {
        constants$2.const$3.set(seg, x);
    }
    public static MemorySegment free_memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void free_memory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_memory free_memory(MemorySegment segment, Arena scope) {
        return free_memory.ofAddress(free_memory$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*calloc_memory)(size_t,size_t);
     * }
     */
    public interface calloc_memory {

        java.lang.foreign.MemorySegment apply(long _x0, long _x1);
        static MemorySegment allocate(calloc_memory fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2.const$5, fi, constants$2.const$4, scope);
        }
        static calloc_memory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$3.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle calloc_memory$VH() {
        return constants$3.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*calloc_memory)(size_t,size_t);
     * }
     */
    public static MemorySegment calloc_memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*calloc_memory)(size_t,size_t);
     * }
     */
    public static void calloc_memory$set(MemorySegment seg, MemorySegment x) {
        constants$3.const$1.set(seg, x);
    }
    public static MemorySegment calloc_memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void calloc_memory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static calloc_memory calloc_memory(MemorySegment segment, Arena scope) {
        return calloc_memory.ofAddress(calloc_memory$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


