// Generated by jextract

package com.ustermetrics.ecos4j.bindings;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct timer {
 *     struct timespec tic;
 *     struct timespec toc;
 * };
 * }
 */
public class timer {

    public static MemoryLayout $LAYOUT() {
        return constants$22.const$2;
    }
    /**
     * {@snippet :
     * struct timespec {
     *     __time_t tv_sec;
     *     __syscall_slong_t tv_nsec;
     * };
     * }
     */
    public static final class timespec {

        // Suppresses default constructor, ensuring non-instantiability.
        private timespec() {}
        public static MemoryLayout $LAYOUT() {
            return constants$22.const$3;
        }
        public static VarHandle tv_sec$VH() {
            return constants$22.const$4;
        }
        /**
         * Getter for field:
         * {@snippet :
         * __time_t tv_sec;
         * }
         */
        public static long tv_sec$get(MemorySegment seg) {
            return (long)constants$22.const$4.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * __time_t tv_sec;
         * }
         */
        public static void tv_sec$set(MemorySegment seg, long x) {
            constants$22.const$4.set(seg, x);
        }
        public static long tv_sec$get(MemorySegment seg, long index) {
            return (long)constants$22.const$4.get(seg.asSlice(index*sizeof()));
        }
        public static void tv_sec$set(MemorySegment seg, long index, long x) {
            constants$22.const$4.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tv_nsec$VH() {
            return constants$22.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * __syscall_slong_t tv_nsec;
         * }
         */
        public static long tv_nsec$get(MemorySegment seg) {
            return (long)constants$22.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * __syscall_slong_t tv_nsec;
         * }
         */
        public static void tv_nsec$set(MemorySegment seg, long x) {
            constants$22.const$5.set(seg, x);
        }
        public static long tv_nsec$get(MemorySegment seg, long index) {
            return (long)constants$22.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void tv_nsec$set(MemorySegment seg, long index, long x) {
            constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment tic$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment toc$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


